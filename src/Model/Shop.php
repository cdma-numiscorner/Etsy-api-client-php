<?php
/**
 * Shop
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * Shop Class Doc Comment
 *
 * @category Class
 * @description A shop created by an Etsy user.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Shop implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shop';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shop_id' => 'int',
        'user_id' => 'int',
        'shop_name' => 'string',
        'create_date' => 'int',
        'title' => 'string',
        'announcement' => 'string',
        'currency_code' => 'string',
        'is_vacation' => 'bool',
        'vacation_message' => 'string',
        'sale_message' => 'string',
        'digital_sale_message' => 'string',
        'update_date' => 'int',
        'listing_active_count' => 'int',
        'digital_listing_count' => 'int',
        'login_name' => 'string',
        'accepts_custom_requests' => 'bool',
        'policy_welcome' => 'string',
        'policy_payment' => 'string',
        'policy_shipping' => 'string',
        'policy_refunds' => 'string',
        'policy_additional' => 'string',
        'policy_seller_info' => 'string',
        'policy_update_date' => 'int',
        'policy_has_private_receipt_info' => 'bool',
        'has_unstructured_policies' => 'bool',
        'policy_privacy' => 'string',
        'vacation_autoreply' => 'string',
        'url' => 'string',
        'image_url_760x100' => 'string',
        'num_favorers' => 'int',
        'languages' => 'string[]',
        'icon_url_fullxfull' => 'string',
        'is_using_structured_policies' => 'bool',
        'has_onboarded_structured_policies' => 'bool',
        'include_dispute_form_link' => 'bool',
        'is_direct_checkout_onboarded' => 'bool',
        'is_calculated_eligible' => 'bool',
        'is_opted_in_to_buyer_promise' => 'bool',
        'is_shop_us_based' => 'bool',
        'transaction_sold_count' => 'int',
        'shipping_from_country_iso' => 'string',
        'shop_location_country_iso' => 'string',
        'review_count' => 'int',
        'review_average' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shop_id' => null,
        'user_id' => null,
        'shop_name' => null,
        'create_date' => null,
        'title' => null,
        'announcement' => null,
        'currency_code' => null,
        'is_vacation' => null,
        'vacation_message' => null,
        'sale_message' => null,
        'digital_sale_message' => null,
        'update_date' => null,
        'listing_active_count' => null,
        'digital_listing_count' => null,
        'login_name' => null,
        'accepts_custom_requests' => null,
        'policy_welcome' => null,
        'policy_payment' => null,
        'policy_shipping' => null,
        'policy_refunds' => null,
        'policy_additional' => null,
        'policy_seller_info' => null,
        'policy_update_date' => null,
        'policy_has_private_receipt_info' => null,
        'has_unstructured_policies' => null,
        'policy_privacy' => null,
        'vacation_autoreply' => null,
        'url' => null,
        'image_url_760x100' => null,
        'num_favorers' => null,
        'languages' => null,
        'icon_url_fullxfull' => null,
        'is_using_structured_policies' => null,
        'has_onboarded_structured_policies' => null,
        'include_dispute_form_link' => null,
        'is_direct_checkout_onboarded' => null,
        'is_calculated_eligible' => null,
        'is_opted_in_to_buyer_promise' => null,
        'is_shop_us_based' => null,
        'transaction_sold_count' => null,
        'shipping_from_country_iso' => 'ISO 3166-1 alpha-2',
        'shop_location_country_iso' => 'ISO 3166-1 alpha-2',
        'review_count' => null,
        'review_average' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shop_id' => 'shop_id',
        'user_id' => 'user_id',
        'shop_name' => 'shop_name',
        'create_date' => 'create_date',
        'title' => 'title',
        'announcement' => 'announcement',
        'currency_code' => 'currency_code',
        'is_vacation' => 'is_vacation',
        'vacation_message' => 'vacation_message',
        'sale_message' => 'sale_message',
        'digital_sale_message' => 'digital_sale_message',
        'update_date' => 'update_date',
        'listing_active_count' => 'listing_active_count',
        'digital_listing_count' => 'digital_listing_count',
        'login_name' => 'login_name',
        'accepts_custom_requests' => 'accepts_custom_requests',
        'policy_welcome' => 'policy_welcome',
        'policy_payment' => 'policy_payment',
        'policy_shipping' => 'policy_shipping',
        'policy_refunds' => 'policy_refunds',
        'policy_additional' => 'policy_additional',
        'policy_seller_info' => 'policy_seller_info',
        'policy_update_date' => 'policy_update_date',
        'policy_has_private_receipt_info' => 'policy_has_private_receipt_info',
        'has_unstructured_policies' => 'has_unstructured_policies',
        'policy_privacy' => 'policy_privacy',
        'vacation_autoreply' => 'vacation_autoreply',
        'url' => 'url',
        'image_url_760x100' => 'image_url_760x100',
        'num_favorers' => 'num_favorers',
        'languages' => 'languages',
        'icon_url_fullxfull' => 'icon_url_fullxfull',
        'is_using_structured_policies' => 'is_using_structured_policies',
        'has_onboarded_structured_policies' => 'has_onboarded_structured_policies',
        'include_dispute_form_link' => 'include_dispute_form_link',
        'is_direct_checkout_onboarded' => 'is_direct_checkout_onboarded',
        'is_calculated_eligible' => 'is_calculated_eligible',
        'is_opted_in_to_buyer_promise' => 'is_opted_in_to_buyer_promise',
        'is_shop_us_based' => 'is_shop_us_based',
        'transaction_sold_count' => 'transaction_sold_count',
        'shipping_from_country_iso' => 'shipping_from_country_iso',
        'shop_location_country_iso' => 'shop_location_country_iso',
        'review_count' => 'review_count',
        'review_average' => 'review_average'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shop_id' => 'setShopId',
        'user_id' => 'setUserId',
        'shop_name' => 'setShopName',
        'create_date' => 'setCreateDate',
        'title' => 'setTitle',
        'announcement' => 'setAnnouncement',
        'currency_code' => 'setCurrencyCode',
        'is_vacation' => 'setIsVacation',
        'vacation_message' => 'setVacationMessage',
        'sale_message' => 'setSaleMessage',
        'digital_sale_message' => 'setDigitalSaleMessage',
        'update_date' => 'setUpdateDate',
        'listing_active_count' => 'setListingActiveCount',
        'digital_listing_count' => 'setDigitalListingCount',
        'login_name' => 'setLoginName',
        'accepts_custom_requests' => 'setAcceptsCustomRequests',
        'policy_welcome' => 'setPolicyWelcome',
        'policy_payment' => 'setPolicyPayment',
        'policy_shipping' => 'setPolicyShipping',
        'policy_refunds' => 'setPolicyRefunds',
        'policy_additional' => 'setPolicyAdditional',
        'policy_seller_info' => 'setPolicySellerInfo',
        'policy_update_date' => 'setPolicyUpdateDate',
        'policy_has_private_receipt_info' => 'setPolicyHasPrivateReceiptInfo',
        'has_unstructured_policies' => 'setHasUnstructuredPolicies',
        'policy_privacy' => 'setPolicyPrivacy',
        'vacation_autoreply' => 'setVacationAutoreply',
        'url' => 'setUrl',
        'image_url_760x100' => 'setImageUrl760x100',
        'num_favorers' => 'setNumFavorers',
        'languages' => 'setLanguages',
        'icon_url_fullxfull' => 'setIconUrlFullxfull',
        'is_using_structured_policies' => 'setIsUsingStructuredPolicies',
        'has_onboarded_structured_policies' => 'setHasOnboardedStructuredPolicies',
        'include_dispute_form_link' => 'setIncludeDisputeFormLink',
        'is_direct_checkout_onboarded' => 'setIsDirectCheckoutOnboarded',
        'is_calculated_eligible' => 'setIsCalculatedEligible',
        'is_opted_in_to_buyer_promise' => 'setIsOptedInToBuyerPromise',
        'is_shop_us_based' => 'setIsShopUsBased',
        'transaction_sold_count' => 'setTransactionSoldCount',
        'shipping_from_country_iso' => 'setShippingFromCountryIso',
        'shop_location_country_iso' => 'setShopLocationCountryIso',
        'review_count' => 'setReviewCount',
        'review_average' => 'setReviewAverage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shop_id' => 'getShopId',
        'user_id' => 'getUserId',
        'shop_name' => 'getShopName',
        'create_date' => 'getCreateDate',
        'title' => 'getTitle',
        'announcement' => 'getAnnouncement',
        'currency_code' => 'getCurrencyCode',
        'is_vacation' => 'getIsVacation',
        'vacation_message' => 'getVacationMessage',
        'sale_message' => 'getSaleMessage',
        'digital_sale_message' => 'getDigitalSaleMessage',
        'update_date' => 'getUpdateDate',
        'listing_active_count' => 'getListingActiveCount',
        'digital_listing_count' => 'getDigitalListingCount',
        'login_name' => 'getLoginName',
        'accepts_custom_requests' => 'getAcceptsCustomRequests',
        'policy_welcome' => 'getPolicyWelcome',
        'policy_payment' => 'getPolicyPayment',
        'policy_shipping' => 'getPolicyShipping',
        'policy_refunds' => 'getPolicyRefunds',
        'policy_additional' => 'getPolicyAdditional',
        'policy_seller_info' => 'getPolicySellerInfo',
        'policy_update_date' => 'getPolicyUpdateDate',
        'policy_has_private_receipt_info' => 'getPolicyHasPrivateReceiptInfo',
        'has_unstructured_policies' => 'getHasUnstructuredPolicies',
        'policy_privacy' => 'getPolicyPrivacy',
        'vacation_autoreply' => 'getVacationAutoreply',
        'url' => 'getUrl',
        'image_url_760x100' => 'getImageUrl760x100',
        'num_favorers' => 'getNumFavorers',
        'languages' => 'getLanguages',
        'icon_url_fullxfull' => 'getIconUrlFullxfull',
        'is_using_structured_policies' => 'getIsUsingStructuredPolicies',
        'has_onboarded_structured_policies' => 'getHasOnboardedStructuredPolicies',
        'include_dispute_form_link' => 'getIncludeDisputeFormLink',
        'is_direct_checkout_onboarded' => 'getIsDirectCheckoutOnboarded',
        'is_calculated_eligible' => 'getIsCalculatedEligible',
        'is_opted_in_to_buyer_promise' => 'getIsOptedInToBuyerPromise',
        'is_shop_us_based' => 'getIsShopUsBased',
        'transaction_sold_count' => 'getTransactionSoldCount',
        'shipping_from_country_iso' => 'getShippingFromCountryIso',
        'shop_location_country_iso' => 'getShopLocationCountryIso',
        'review_count' => 'getReviewCount',
        'review_average' => 'getReviewAverage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shop_id'] = $data['shop_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['shop_name'] = $data['shop_name'] ?? null;
        $this->container['create_date'] = $data['create_date'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['announcement'] = $data['announcement'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['is_vacation'] = $data['is_vacation'] ?? null;
        $this->container['vacation_message'] = $data['vacation_message'] ?? null;
        $this->container['sale_message'] = $data['sale_message'] ?? null;
        $this->container['digital_sale_message'] = $data['digital_sale_message'] ?? null;
        $this->container['update_date'] = $data['update_date'] ?? null;
        $this->container['listing_active_count'] = $data['listing_active_count'] ?? null;
        $this->container['digital_listing_count'] = $data['digital_listing_count'] ?? null;
        $this->container['login_name'] = $data['login_name'] ?? null;
        $this->container['accepts_custom_requests'] = $data['accepts_custom_requests'] ?? null;
        $this->container['policy_welcome'] = $data['policy_welcome'] ?? null;
        $this->container['policy_payment'] = $data['policy_payment'] ?? null;
        $this->container['policy_shipping'] = $data['policy_shipping'] ?? null;
        $this->container['policy_refunds'] = $data['policy_refunds'] ?? null;
        $this->container['policy_additional'] = $data['policy_additional'] ?? null;
        $this->container['policy_seller_info'] = $data['policy_seller_info'] ?? null;
        $this->container['policy_update_date'] = $data['policy_update_date'] ?? null;
        $this->container['policy_has_private_receipt_info'] = $data['policy_has_private_receipt_info'] ?? null;
        $this->container['has_unstructured_policies'] = $data['has_unstructured_policies'] ?? null;
        $this->container['policy_privacy'] = $data['policy_privacy'] ?? null;
        $this->container['vacation_autoreply'] = $data['vacation_autoreply'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['image_url_760x100'] = $data['image_url_760x100'] ?? null;
        $this->container['num_favorers'] = $data['num_favorers'] ?? null;
        $this->container['languages'] = $data['languages'] ?? null;
        $this->container['icon_url_fullxfull'] = $data['icon_url_fullxfull'] ?? null;
        $this->container['is_using_structured_policies'] = $data['is_using_structured_policies'] ?? null;
        $this->container['has_onboarded_structured_policies'] = $data['has_onboarded_structured_policies'] ?? null;
        $this->container['include_dispute_form_link'] = $data['include_dispute_form_link'] ?? null;
        $this->container['is_direct_checkout_onboarded'] = $data['is_direct_checkout_onboarded'] ?? null;
        $this->container['is_calculated_eligible'] = $data['is_calculated_eligible'] ?? null;
        $this->container['is_opted_in_to_buyer_promise'] = $data['is_opted_in_to_buyer_promise'] ?? null;
        $this->container['is_shop_us_based'] = $data['is_shop_us_based'] ?? null;
        $this->container['transaction_sold_count'] = $data['transaction_sold_count'] ?? null;
        $this->container['shipping_from_country_iso'] = $data['shipping_from_country_iso'] ?? null;
        $this->container['shop_location_country_iso'] = $data['shop_location_country_iso'] ?? null;
        $this->container['review_count'] = $data['review_count'] ?? null;
        $this->container['review_average'] = $data['review_average'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shop_id'] === null) {
            $invalidProperties[] = "'shop_id' can't be null";
        }
        if (($this->container['shop_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shop_id', must be bigger than or equal to 1.";
        }

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if (($this->container['user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['shop_name'] === null) {
            $invalidProperties[] = "'shop_name' can't be null";
        }
        if ($this->container['create_date'] === null) {
            $invalidProperties[] = "'create_date' can't be null";
        }
        if (($this->container['create_date'] < 0)) {
            $invalidProperties[] = "invalid value for 'create_date', must be bigger than or equal to 0.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['announcement'] === null) {
            $invalidProperties[] = "'announcement' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['is_vacation'] === null) {
            $invalidProperties[] = "'is_vacation' can't be null";
        }
        if ($this->container['vacation_message'] === null) {
            $invalidProperties[] = "'vacation_message' can't be null";
        }
        if ($this->container['sale_message'] === null) {
            $invalidProperties[] = "'sale_message' can't be null";
        }
        if ($this->container['digital_sale_message'] === null) {
            $invalidProperties[] = "'digital_sale_message' can't be null";
        }
        if ($this->container['update_date'] === null) {
            $invalidProperties[] = "'update_date' can't be null";
        }
        if (($this->container['update_date'] < 0)) {
            $invalidProperties[] = "invalid value for 'update_date', must be bigger than or equal to 0.";
        }

        if ($this->container['listing_active_count'] === null) {
            $invalidProperties[] = "'listing_active_count' can't be null";
        }
        if (($this->container['listing_active_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'listing_active_count', must be bigger than or equal to 0.";
        }

        if ($this->container['digital_listing_count'] === null) {
            $invalidProperties[] = "'digital_listing_count' can't be null";
        }
        if (($this->container['digital_listing_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'digital_listing_count', must be bigger than or equal to 0.";
        }

        if ($this->container['login_name'] === null) {
            $invalidProperties[] = "'login_name' can't be null";
        }
        if ($this->container['accepts_custom_requests'] === null) {
            $invalidProperties[] = "'accepts_custom_requests' can't be null";
        }
        if ($this->container['policy_welcome'] === null) {
            $invalidProperties[] = "'policy_welcome' can't be null";
        }
        if ($this->container['policy_payment'] === null) {
            $invalidProperties[] = "'policy_payment' can't be null";
        }
        if ($this->container['policy_shipping'] === null) {
            $invalidProperties[] = "'policy_shipping' can't be null";
        }
        if ($this->container['policy_refunds'] === null) {
            $invalidProperties[] = "'policy_refunds' can't be null";
        }
        if ($this->container['policy_additional'] === null) {
            $invalidProperties[] = "'policy_additional' can't be null";
        }
        if ($this->container['policy_seller_info'] === null) {
            $invalidProperties[] = "'policy_seller_info' can't be null";
        }
        if ($this->container['policy_update_date'] === null) {
            $invalidProperties[] = "'policy_update_date' can't be null";
        }
        if (($this->container['policy_update_date'] < 0)) {
            $invalidProperties[] = "invalid value for 'policy_update_date', must be bigger than or equal to 0.";
        }

        if ($this->container['policy_has_private_receipt_info'] === null) {
            $invalidProperties[] = "'policy_has_private_receipt_info' can't be null";
        }
        if ($this->container['has_unstructured_policies'] === null) {
            $invalidProperties[] = "'has_unstructured_policies' can't be null";
        }
        if ($this->container['policy_privacy'] === null) {
            $invalidProperties[] = "'policy_privacy' can't be null";
        }
        if ($this->container['vacation_autoreply'] === null) {
            $invalidProperties[] = "'vacation_autoreply' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['image_url_760x100'] === null) {
            $invalidProperties[] = "'image_url_760x100' can't be null";
        }
        if ($this->container['num_favorers'] === null) {
            $invalidProperties[] = "'num_favorers' can't be null";
        }
        if (($this->container['num_favorers'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_favorers', must be bigger than or equal to 0.";
        }

        if ($this->container['languages'] === null) {
            $invalidProperties[] = "'languages' can't be null";
        }
        if ($this->container['icon_url_fullxfull'] === null) {
            $invalidProperties[] = "'icon_url_fullxfull' can't be null";
        }
        if ($this->container['is_using_structured_policies'] === null) {
            $invalidProperties[] = "'is_using_structured_policies' can't be null";
        }
        if ($this->container['has_onboarded_structured_policies'] === null) {
            $invalidProperties[] = "'has_onboarded_structured_policies' can't be null";
        }
        if ($this->container['include_dispute_form_link'] === null) {
            $invalidProperties[] = "'include_dispute_form_link' can't be null";
        }
        if ($this->container['is_direct_checkout_onboarded'] === null) {
            $invalidProperties[] = "'is_direct_checkout_onboarded' can't be null";
        }
        if ($this->container['is_calculated_eligible'] === null) {
            $invalidProperties[] = "'is_calculated_eligible' can't be null";
        }
        if ($this->container['is_opted_in_to_buyer_promise'] === null) {
            $invalidProperties[] = "'is_opted_in_to_buyer_promise' can't be null";
        }
        if ($this->container['is_shop_us_based'] === null) {
            $invalidProperties[] = "'is_shop_us_based' can't be null";
        }
        if ($this->container['transaction_sold_count'] === null) {
            $invalidProperties[] = "'transaction_sold_count' can't be null";
        }
        if (($this->container['transaction_sold_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_sold_count', must be bigger than or equal to 0.";
        }

        if ($this->container['shipping_from_country_iso'] === null) {
            $invalidProperties[] = "'shipping_from_country_iso' can't be null";
        }
        if ($this->container['shop_location_country_iso'] === null) {
            $invalidProperties[] = "'shop_location_country_iso' can't be null";
        }
        if ($this->container['review_count'] === null) {
            $invalidProperties[] = "'review_count' can't be null";
        }
        if ($this->container['review_average'] === null) {
            $invalidProperties[] = "'review_average' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id The unique positive non-zero numeric ID for an Etsy Shop.
     *
     * @return self
     */
    public function setShopId($shop_id)
    {

        if (($shop_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shop_id when calling Shop., must be bigger than or equal to 1.');
        }

        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop.
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (($user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $user_id when calling Shop., must be bigger than or equal to 1.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string $shop_name The shop's name string.
     *
     * @return self
     */
    public function setShopName($shop_name)
    {
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return int
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param int $create_date The date and time this shop was created, in epoch seconds.
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {

        if (($create_date < 0)) {
            throw new \InvalidArgumentException('invalid value for $create_date when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title A brief heading string for the shop\\'s main page.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets announcement
     *
     * @return string
     */
    public function getAnnouncement()
    {
        return $this->container['announcement'];
    }

    /**
     * Sets announcement
     *
     * @param string $announcement An announcement string to buyers that displays on the shop's homepage.
     *
     * @return self
     */
    public function setAnnouncement($announcement)
    {
        $this->container['announcement'] = $announcement;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_vacation
     *
     * @return bool
     */
    public function getIsVacation()
    {
        return $this->container['is_vacation'];
    }

    /**
     * Sets is_vacation
     *
     * @param bool $is_vacation When true, this shop is not accepting purchases.
     *
     * @return self
     */
    public function setIsVacation($is_vacation)
    {
        $this->container['is_vacation'] = $is_vacation;

        return $this;
    }

    /**
     * Gets vacation_message
     *
     * @return string
     */
    public function getVacationMessage()
    {
        return $this->container['vacation_message'];
    }

    /**
     * Sets vacation_message
     *
     * @param string $vacation_message The shop's message string displayed when is_vacation is true.
     *
     * @return self
     */
    public function setVacationMessage($vacation_message)
    {
        $this->container['vacation_message'] = $vacation_message;

        return $this;
    }

    /**
     * Gets sale_message
     *
     * @return string
     */
    public function getSaleMessage()
    {
        return $this->container['sale_message'];
    }

    /**
     * Sets sale_message
     *
     * @param string $sale_message A message string sent to users who complete a purchase from this shop.
     *
     * @return self
     */
    public function setSaleMessage($sale_message)
    {
        $this->container['sale_message'] = $sale_message;

        return $this;
    }

    /**
     * Gets digital_sale_message
     *
     * @return string
     */
    public function getDigitalSaleMessage()
    {
        return $this->container['digital_sale_message'];
    }

    /**
     * Sets digital_sale_message
     *
     * @param string $digital_sale_message A message string sent to users who purchase a digital item from this shop.
     *
     * @return self
     */
    public function setDigitalSaleMessage($digital_sale_message)
    {
        $this->container['digital_sale_message'] = $digital_sale_message;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return int
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param int $update_date The date and time of the last update to the shop, in epoch seconds.
     *
     * @return self
     */
    public function setUpdateDate($update_date)
    {

        if (($update_date < 0)) {
            throw new \InvalidArgumentException('invalid value for $update_date when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets listing_active_count
     *
     * @return int
     */
    public function getListingActiveCount()
    {
        return $this->container['listing_active_count'];
    }

    /**
     * Sets listing_active_count
     *
     * @param int $listing_active_count The number of active listings in the shop.
     *
     * @return self
     */
    public function setListingActiveCount($listing_active_count)
    {

        if (($listing_active_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $listing_active_count when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['listing_active_count'] = $listing_active_count;

        return $this;
    }

    /**
     * Gets digital_listing_count
     *
     * @return int
     */
    public function getDigitalListingCount()
    {
        return $this->container['digital_listing_count'];
    }

    /**
     * Sets digital_listing_count
     *
     * @param int $digital_listing_count The number of digital listings in the shop.
     *
     * @return self
     */
    public function setDigitalListingCount($digital_listing_count)
    {

        if (($digital_listing_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $digital_listing_count when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['digital_listing_count'] = $digital_listing_count;

        return $this;
    }

    /**
     * Gets login_name
     *
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['login_name'];
    }

    /**
     * Sets login_name
     *
     * @param string $login_name The shop owner\\'s login name string.
     *
     * @return self
     */
    public function setLoginName($login_name)
    {
        $this->container['login_name'] = $login_name;

        return $this;
    }

    /**
     * Gets accepts_custom_requests
     *
     * @return bool
     */
    public function getAcceptsCustomRequests()
    {
        return $this->container['accepts_custom_requests'];
    }

    /**
     * Sets accepts_custom_requests
     *
     * @param bool $accepts_custom_requests When true, the shop accepts customization requests.
     *
     * @return self
     */
    public function setAcceptsCustomRequests($accepts_custom_requests)
    {
        $this->container['accepts_custom_requests'] = $accepts_custom_requests;

        return $this;
    }

    /**
     * Gets policy_welcome
     *
     * @return string
     */
    public function getPolicyWelcome()
    {
        return $this->container['policy_welcome'];
    }

    /**
     * Sets policy_welcome
     *
     * @param string $policy_welcome The shop's policy welcome string (may be blank).
     *
     * @return self
     */
    public function setPolicyWelcome($policy_welcome)
    {
        $this->container['policy_welcome'] = $policy_welcome;

        return $this;
    }

    /**
     * Gets policy_payment
     *
     * @return string
     */
    public function getPolicyPayment()
    {
        return $this->container['policy_payment'];
    }

    /**
     * Sets policy_payment
     *
     * @param string $policy_payment The shop's payment policy string (may be blank).
     *
     * @return self
     */
    public function setPolicyPayment($policy_payment)
    {
        $this->container['policy_payment'] = $policy_payment;

        return $this;
    }

    /**
     * Gets policy_shipping
     *
     * @return string
     */
    public function getPolicyShipping()
    {
        return $this->container['policy_shipping'];
    }

    /**
     * Sets policy_shipping
     *
     * @param string $policy_shipping The shop's shipping policy string (may be blank).
     *
     * @return self
     */
    public function setPolicyShipping($policy_shipping)
    {
        $this->container['policy_shipping'] = $policy_shipping;

        return $this;
    }

    /**
     * Gets policy_refunds
     *
     * @return string
     */
    public function getPolicyRefunds()
    {
        return $this->container['policy_refunds'];
    }

    /**
     * Sets policy_refunds
     *
     * @param string $policy_refunds The shop's refund policy string (may be blank).
     *
     * @return self
     */
    public function setPolicyRefunds($policy_refunds)
    {
        $this->container['policy_refunds'] = $policy_refunds;

        return $this;
    }

    /**
     * Gets policy_additional
     *
     * @return string
     */
    public function getPolicyAdditional()
    {
        return $this->container['policy_additional'];
    }

    /**
     * Sets policy_additional
     *
     * @param string $policy_additional The shop's additional policies string (may be blank).
     *
     * @return self
     */
    public function setPolicyAdditional($policy_additional)
    {
        $this->container['policy_additional'] = $policy_additional;

        return $this;
    }

    /**
     * Gets policy_seller_info
     *
     * @return string
     */
    public function getPolicySellerInfo()
    {
        return $this->container['policy_seller_info'];
    }

    /**
     * Sets policy_seller_info
     *
     * @param string $policy_seller_info The shop's seller infomation string (may be blank).
     *
     * @return self
     */
    public function setPolicySellerInfo($policy_seller_info)
    {
        $this->container['policy_seller_info'] = $policy_seller_info;

        return $this;
    }

    /**
     * Gets policy_update_date
     *
     * @return int
     */
    public function getPolicyUpdateDate()
    {
        return $this->container['policy_update_date'];
    }

    /**
     * Sets policy_update_date
     *
     * @param int $policy_update_date The date and time of the last update to the shop's policies, in epoch seconds.
     *
     * @return self
     */
    public function setPolicyUpdateDate($policy_update_date)
    {

        if (($policy_update_date < 0)) {
            throw new \InvalidArgumentException('invalid value for $policy_update_date when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['policy_update_date'] = $policy_update_date;

        return $this;
    }

    /**
     * Gets policy_has_private_receipt_info
     *
     * @return bool
     */
    public function getPolicyHasPrivateReceiptInfo()
    {
        return $this->container['policy_has_private_receipt_info'];
    }

    /**
     * Sets policy_has_private_receipt_info
     *
     * @param bool $policy_has_private_receipt_info When true, EU receipts display private info.
     *
     * @return self
     */
    public function setPolicyHasPrivateReceiptInfo($policy_has_private_receipt_info)
    {
        $this->container['policy_has_private_receipt_info'] = $policy_has_private_receipt_info;

        return $this;
    }

    /**
     * Gets has_unstructured_policies
     *
     * @return bool
     */
    public function getHasUnstructuredPolicies()
    {
        return $this->container['has_unstructured_policies'];
    }

    /**
     * Sets has_unstructured_policies
     *
     * @param bool $has_unstructured_policies When true, the shop displays additional unstructured policy fields.
     *
     * @return self
     */
    public function setHasUnstructuredPolicies($has_unstructured_policies)
    {
        $this->container['has_unstructured_policies'] = $has_unstructured_policies;

        return $this;
    }

    /**
     * Gets policy_privacy
     *
     * @return string
     */
    public function getPolicyPrivacy()
    {
        return $this->container['policy_privacy'];
    }

    /**
     * Sets policy_privacy
     *
     * @param string $policy_privacy The shop's privacy policy string (may be blank).
     *
     * @return self
     */
    public function setPolicyPrivacy($policy_privacy)
    {
        $this->container['policy_privacy'] = $policy_privacy;

        return $this;
    }

    /**
     * Gets vacation_autoreply
     *
     * @return string
     */
    public function getVacationAutoreply()
    {
        return $this->container['vacation_autoreply'];
    }

    /**
     * Sets vacation_autoreply
     *
     * @param string $vacation_autoreply The shop's automatic reply string displayed in new conversations when is_vacation is true.
     *
     * @return self
     */
    public function setVacationAutoreply($vacation_autoreply)
    {
        $this->container['vacation_autoreply'] = $vacation_autoreply;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL string for this shop.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image_url_760x100
     *
     * @return string
     */
    public function getImageUrl760x100()
    {
        return $this->container['image_url_760x100'];
    }

    /**
     * Sets image_url_760x100
     *
     * @param string $image_url_760x100 The URL string for this shop's banner image.
     *
     * @return self
     */
    public function setImageUrl760x100($image_url_760x100)
    {
        $this->container['image_url_760x100'] = $image_url_760x100;

        return $this;
    }

    /**
     * Gets num_favorers
     *
     * @return int
     */
    public function getNumFavorers()
    {
        return $this->container['num_favorers'];
    }

    /**
     * Sets num_favorers
     *
     * @param int $num_favorers The number of users who marked this shop a favorite.
     *
     * @return self
     */
    public function setNumFavorers($num_favorers)
    {

        if (($num_favorers < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_favorers when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['num_favorers'] = $num_favorers;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages A list of language strings for the shop's enrolled languages.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets icon_url_fullxfull
     *
     * @return string
     */
    public function getIconUrlFullxfull()
    {
        return $this->container['icon_url_fullxfull'];
    }

    /**
     * Sets icon_url_fullxfull
     *
     * @param string $icon_url_fullxfull The URL string for this shop's icon image.
     *
     * @return self
     */
    public function setIconUrlFullxfull($icon_url_fullxfull)
    {
        $this->container['icon_url_fullxfull'] = $icon_url_fullxfull;

        return $this;
    }

    /**
     * Gets is_using_structured_policies
     *
     * @return bool
     */
    public function getIsUsingStructuredPolicies()
    {
        return $this->container['is_using_structured_policies'];
    }

    /**
     * Sets is_using_structured_policies
     *
     * @param bool $is_using_structured_policies When true, the shop accepted using structured policies.
     *
     * @return self
     */
    public function setIsUsingStructuredPolicies($is_using_structured_policies)
    {
        $this->container['is_using_structured_policies'] = $is_using_structured_policies;

        return $this;
    }

    /**
     * Gets has_onboarded_structured_policies
     *
     * @return bool
     */
    public function getHasOnboardedStructuredPolicies()
    {
        return $this->container['has_onboarded_structured_policies'];
    }

    /**
     * Sets has_onboarded_structured_policies
     *
     * @param bool $has_onboarded_structured_policies When true, the shop accepted OR declined after viewing structured policies onboarding.
     *
     * @return self
     */
    public function setHasOnboardedStructuredPolicies($has_onboarded_structured_policies)
    {
        $this->container['has_onboarded_structured_policies'] = $has_onboarded_structured_policies;

        return $this;
    }

    /**
     * Gets include_dispute_form_link
     *
     * @return bool
     */
    public function getIncludeDisputeFormLink()
    {
        return $this->container['include_dispute_form_link'];
    }

    /**
     * Sets include_dispute_form_link
     *
     * @param bool $include_dispute_form_link When true, this shop\\'s policies include a link to an EU online dispute form.
     *
     * @return self
     */
    public function setIncludeDisputeFormLink($include_dispute_form_link)
    {
        $this->container['include_dispute_form_link'] = $include_dispute_form_link;

        return $this;
    }

    /**
     * Gets is_direct_checkout_onboarded
     *
     * @return bool
     */
    public function getIsDirectCheckoutOnboarded()
    {
        return $this->container['is_direct_checkout_onboarded'];
    }

    /**
     * Sets is_direct_checkout_onboarded
     *
     * @param bool $is_direct_checkout_onboarded When true, the shop has onboarded onto Etsy Payments.
     *
     * @return self
     */
    public function setIsDirectCheckoutOnboarded($is_direct_checkout_onboarded)
    {
        $this->container['is_direct_checkout_onboarded'] = $is_direct_checkout_onboarded;

        return $this;
    }

    /**
     * Gets is_calculated_eligible
     *
     * @return bool
     */
    public function getIsCalculatedEligible()
    {
        return $this->container['is_calculated_eligible'];
    }

    /**
     * Sets is_calculated_eligible
     *
     * @param bool $is_calculated_eligible When true, the shop is elegible for calculated shipping profiles. (Only available in the US and Canada)
     *
     * @return self
     */
    public function setIsCalculatedEligible($is_calculated_eligible)
    {
        $this->container['is_calculated_eligible'] = $is_calculated_eligible;

        return $this;
    }

    /**
     * Gets is_opted_in_to_buyer_promise
     *
     * @return bool
     */
    public function getIsOptedInToBuyerPromise()
    {
        return $this->container['is_opted_in_to_buyer_promise'];
    }

    /**
     * Sets is_opted_in_to_buyer_promise
     *
     * @param bool $is_opted_in_to_buyer_promise When true, the shop opted in to buyer promise.
     *
     * @return self
     */
    public function setIsOptedInToBuyerPromise($is_opted_in_to_buyer_promise)
    {
        $this->container['is_opted_in_to_buyer_promise'] = $is_opted_in_to_buyer_promise;

        return $this;
    }

    /**
     * Gets is_shop_us_based
     *
     * @return bool
     */
    public function getIsShopUsBased()
    {
        return $this->container['is_shop_us_based'];
    }

    /**
     * Sets is_shop_us_based
     *
     * @param bool $is_shop_us_based When true, the shop is based in the US.
     *
     * @return self
     */
    public function setIsShopUsBased($is_shop_us_based)
    {
        $this->container['is_shop_us_based'] = $is_shop_us_based;

        return $this;
    }

    /**
     * Gets transaction_sold_count
     *
     * @return int
     */
    public function getTransactionSoldCount()
    {
        return $this->container['transaction_sold_count'];
    }

    /**
     * Sets transaction_sold_count
     *
     * @param int $transaction_sold_count The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop
     *
     * @return self
     */
    public function setTransactionSoldCount($transaction_sold_count)
    {

        if (($transaction_sold_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $transaction_sold_count when calling Shop., must be bigger than or equal to 0.');
        }

        $this->container['transaction_sold_count'] = $transaction_sold_count;

        return $this;
    }

    /**
     * Gets shipping_from_country_iso
     *
     * @return string
     */
    public function getShippingFromCountryIso()
    {
        return $this->container['shipping_from_country_iso'];
    }

    /**
     * Sets shipping_from_country_iso
     *
     * @param string $shipping_from_country_iso The country iso the shop is shipping from.
     *
     * @return self
     */
    public function setShippingFromCountryIso($shipping_from_country_iso)
    {
        $this->container['shipping_from_country_iso'] = $shipping_from_country_iso;

        return $this;
    }

    /**
     * Gets shop_location_country_iso
     *
     * @return string
     */
    public function getShopLocationCountryIso()
    {
        return $this->container['shop_location_country_iso'];
    }

    /**
     * Sets shop_location_country_iso
     *
     * @param string $shop_location_country_iso The country iso where the shop is located.
     *
     * @return self
     */
    public function setShopLocationCountryIso($shop_location_country_iso)
    {
        $this->container['shop_location_country_iso'] = $shop_location_country_iso;

        return $this;
    }

    /**
     * Gets review_count
     *
     * @return int
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     *
     * @param int $review_count Number of reviews of shop listings in the past year.
     *
     * @return self
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets review_average
     *
     * @return float
     */
    public function getReviewAverage()
    {
        return $this->container['review_average'];
    }

    /**
     * Sets review_average
     *
     * @param float $review_average Average rating based on reviews of shop listings in the past year.
     *
     * @return self
     */
    public function setReviewAverage($review_average)
    {
        $this->container['review_average'] = $review_average;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


