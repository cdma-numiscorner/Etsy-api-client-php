<?php
/**
 * ShopReceipt
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * ShopReceipt Class Doc Comment
 *
 * @category Class
 * @description The record of a purchase from a shop. Shop receipts display monetary values using the shop&#39;s currency.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ShopReceipt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShopReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'receipt_id' => 'int',
        'receipt_type' => 'int',
        'seller_user_id' => 'int',
        'buyer_user_id' => 'int',
        'name' => 'string',
        'first_line' => 'string',
        'second_line' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'formatted_address' => 'string',
        'country_iso' => 'string',
        'payment_method' => 'string',
        'payment_email' => 'string',
        'message_from_seller' => 'string',
        'message_from_buyer' => 'string',
        'message_from_payment' => 'string',
        'is_paid' => 'bool',
        'is_shipped' => 'bool',
        'create_timestamp' => 'int',
        'update_timestamp' => 'int',
        'gift_message' => 'string',
        'grandtotal' => 'Money',
        'subtotal' => 'Money',
        'total_price' => 'Money',
        'total_shipping_cost' => 'Money',
        'total_tax_cost' => 'Money',
        'total_vat_cost' => 'Money',
        'discount_amt' => 'Money',
        'gift_wrap_price' => 'Money',
        'shipments' => 'ShopReceiptShipment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'receipt_id' => null,
        'receipt_type' => null,
        'seller_user_id' => null,
        'buyer_user_id' => null,
        'name' => null,
        'first_line' => null,
        'second_line' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'formatted_address' => null,
        'country_iso' => null,
        'payment_method' => null,
        'payment_email' => null,
        'message_from_seller' => null,
        'message_from_buyer' => null,
        'message_from_payment' => null,
        'is_paid' => null,
        'is_shipped' => null,
        'create_timestamp' => null,
        'update_timestamp' => null,
        'gift_message' => null,
        'grandtotal' => null,
        'subtotal' => null,
        'total_price' => null,
        'total_shipping_cost' => null,
        'total_tax_cost' => null,
        'total_vat_cost' => null,
        'discount_amt' => null,
        'gift_wrap_price' => null,
        'shipments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receipt_id' => 'receipt_id',
        'receipt_type' => 'receipt_type',
        'seller_user_id' => 'seller_user_id',
        'buyer_user_id' => 'buyer_user_id',
        'name' => 'name',
        'first_line' => 'first_line',
        'second_line' => 'second_line',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'formatted_address' => 'formatted_address',
        'country_iso' => 'country_iso',
        'payment_method' => 'payment_method',
        'payment_email' => 'payment_email',
        'message_from_seller' => 'message_from_seller',
        'message_from_buyer' => 'message_from_buyer',
        'message_from_payment' => 'message_from_payment',
        'is_paid' => 'is_paid',
        'is_shipped' => 'is_shipped',
        'create_timestamp' => 'create_timestamp',
        'update_timestamp' => 'update_timestamp',
        'gift_message' => 'gift_message',
        'grandtotal' => 'grandtotal',
        'subtotal' => 'subtotal',
        'total_price' => 'total_price',
        'total_shipping_cost' => 'total_shipping_cost',
        'total_tax_cost' => 'total_tax_cost',
        'total_vat_cost' => 'total_vat_cost',
        'discount_amt' => 'discount_amt',
        'gift_wrap_price' => 'gift_wrap_price',
        'shipments' => 'shipments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receipt_id' => 'setReceiptId',
        'receipt_type' => 'setReceiptType',
        'seller_user_id' => 'setSellerUserId',
        'buyer_user_id' => 'setBuyerUserId',
        'name' => 'setName',
        'first_line' => 'setFirstLine',
        'second_line' => 'setSecondLine',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'formatted_address' => 'setFormattedAddress',
        'country_iso' => 'setCountryIso',
        'payment_method' => 'setPaymentMethod',
        'payment_email' => 'setPaymentEmail',
        'message_from_seller' => 'setMessageFromSeller',
        'message_from_buyer' => 'setMessageFromBuyer',
        'message_from_payment' => 'setMessageFromPayment',
        'is_paid' => 'setIsPaid',
        'is_shipped' => 'setIsShipped',
        'create_timestamp' => 'setCreateTimestamp',
        'update_timestamp' => 'setUpdateTimestamp',
        'gift_message' => 'setGiftMessage',
        'grandtotal' => 'setGrandtotal',
        'subtotal' => 'setSubtotal',
        'total_price' => 'setTotalPrice',
        'total_shipping_cost' => 'setTotalShippingCost',
        'total_tax_cost' => 'setTotalTaxCost',
        'total_vat_cost' => 'setTotalVatCost',
        'discount_amt' => 'setDiscountAmt',
        'gift_wrap_price' => 'setGiftWrapPrice',
        'shipments' => 'setShipments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receipt_id' => 'getReceiptId',
        'receipt_type' => 'getReceiptType',
        'seller_user_id' => 'getSellerUserId',
        'buyer_user_id' => 'getBuyerUserId',
        'name' => 'getName',
        'first_line' => 'getFirstLine',
        'second_line' => 'getSecondLine',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'formatted_address' => 'getFormattedAddress',
        'country_iso' => 'getCountryIso',
        'payment_method' => 'getPaymentMethod',
        'payment_email' => 'getPaymentEmail',
        'message_from_seller' => 'getMessageFromSeller',
        'message_from_buyer' => 'getMessageFromBuyer',
        'message_from_payment' => 'getMessageFromPayment',
        'is_paid' => 'getIsPaid',
        'is_shipped' => 'getIsShipped',
        'create_timestamp' => 'getCreateTimestamp',
        'update_timestamp' => 'getUpdateTimestamp',
        'gift_message' => 'getGiftMessage',
        'grandtotal' => 'getGrandtotal',
        'subtotal' => 'getSubtotal',
        'total_price' => 'getTotalPrice',
        'total_shipping_cost' => 'getTotalShippingCost',
        'total_tax_cost' => 'getTotalTaxCost',
        'total_vat_cost' => 'getTotalVatCost',
        'discount_amt' => 'getDiscountAmt',
        'gift_wrap_price' => 'getGiftWrapPrice',
        'shipments' => 'getShipments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receipt_id'] = $data['receipt_id'] ?? null;
        $this->container['receipt_type'] = $data['receipt_type'] ?? null;
        $this->container['seller_user_id'] = $data['seller_user_id'] ?? null;
        $this->container['buyer_user_id'] = $data['buyer_user_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['first_line'] = $data['first_line'] ?? null;
        $this->container['second_line'] = $data['second_line'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['formatted_address'] = $data['formatted_address'] ?? null;
        $this->container['country_iso'] = $data['country_iso'] ?? null;
        $this->container['payment_method'] = $data['payment_method'] ?? null;
        $this->container['payment_email'] = $data['payment_email'] ?? null;
        $this->container['message_from_seller'] = $data['message_from_seller'] ?? null;
        $this->container['message_from_buyer'] = $data['message_from_buyer'] ?? null;
        $this->container['message_from_payment'] = $data['message_from_payment'] ?? null;
        $this->container['is_paid'] = $data['is_paid'] ?? null;
        $this->container['is_shipped'] = $data['is_shipped'] ?? null;
        $this->container['create_timestamp'] = $data['create_timestamp'] ?? null;
        $this->container['update_timestamp'] = $data['update_timestamp'] ?? null;
        $this->container['gift_message'] = $data['gift_message'] ?? null;
        $this->container['grandtotal'] = $data['grandtotal'] ?? null;
        $this->container['subtotal'] = $data['subtotal'] ?? null;
        $this->container['total_price'] = $data['total_price'] ?? null;
        $this->container['total_shipping_cost'] = $data['total_shipping_cost'] ?? null;
        $this->container['total_tax_cost'] = $data['total_tax_cost'] ?? null;
        $this->container['total_vat_cost'] = $data['total_vat_cost'] ?? null;
        $this->container['discount_amt'] = $data['discount_amt'] ?? null;
        $this->container['gift_wrap_price'] = $data['gift_wrap_price'] ?? null;
        $this->container['shipments'] = $data['shipments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receipt_id'] === null) {
            $invalidProperties[] = "'receipt_id' can't be null";
        }
        if (($this->container['receipt_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'receipt_id', must be bigger than or equal to 1.";
        }

        if ($this->container['receipt_type'] === null) {
            $invalidProperties[] = "'receipt_type' can't be null";
        }
        if (($this->container['receipt_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'receipt_type', must be bigger than or equal to 0.";
        }

        if ($this->container['seller_user_id'] === null) {
            $invalidProperties[] = "'seller_user_id' can't be null";
        }
        if (($this->container['seller_user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'seller_user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['buyer_user_id'] === null) {
            $invalidProperties[] = "'buyer_user_id' can't be null";
        }
        if (($this->container['buyer_user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'buyer_user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['first_line'] === null) {
            $invalidProperties[] = "'first_line' can't be null";
        }
        if ($this->container['second_line'] === null) {
            $invalidProperties[] = "'second_line' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ($this->container['formatted_address'] === null) {
            $invalidProperties[] = "'formatted_address' can't be null";
        }
        if ($this->container['country_iso'] === null) {
            $invalidProperties[] = "'country_iso' can't be null";
        }
        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        if ($this->container['payment_email'] === null) {
            $invalidProperties[] = "'payment_email' can't be null";
        }
        if ($this->container['message_from_seller'] === null) {
            $invalidProperties[] = "'message_from_seller' can't be null";
        }
        if ($this->container['message_from_buyer'] === null) {
            $invalidProperties[] = "'message_from_buyer' can't be null";
        }
        if ($this->container['message_from_payment'] === null) {
            $invalidProperties[] = "'message_from_payment' can't be null";
        }
        if ($this->container['is_paid'] === null) {
            $invalidProperties[] = "'is_paid' can't be null";
        }
        if ($this->container['is_shipped'] === null) {
            $invalidProperties[] = "'is_shipped' can't be null";
        }
        if ($this->container['create_timestamp'] === null) {
            $invalidProperties[] = "'create_timestamp' can't be null";
        }
        if (($this->container['create_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'create_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['update_timestamp'] === null) {
            $invalidProperties[] = "'update_timestamp' can't be null";
        }
        if (($this->container['update_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'update_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['gift_message'] === null) {
            $invalidProperties[] = "'gift_message' can't be null";
        }
        if ($this->container['grandtotal'] === null) {
            $invalidProperties[] = "'grandtotal' can't be null";
        }
        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['total_shipping_cost'] === null) {
            $invalidProperties[] = "'total_shipping_cost' can't be null";
        }
        if ($this->container['total_tax_cost'] === null) {
            $invalidProperties[] = "'total_tax_cost' can't be null";
        }
        if ($this->container['total_vat_cost'] === null) {
            $invalidProperties[] = "'total_vat_cost' can't be null";
        }
        if ($this->container['discount_amt'] === null) {
            $invalidProperties[] = "'discount_amt' can't be null";
        }
        if ($this->container['gift_wrap_price'] === null) {
            $invalidProperties[] = "'gift_wrap_price' can't be null";
        }
        if ($this->container['shipments'] === null) {
            $invalidProperties[] = "'shipments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receipt_id
     *
     * @return int
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param int $receipt_id A unique numeric ID for a [receipt](/documentation/reference#tag/Shop-Receipt) from a specific Etsy [shop](/documentation/reference#tag/Shop).
     *
     * @return self
     */
    public function setReceiptId($receipt_id)
    {

        if (($receipt_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $receipt_id when calling ShopReceipt., must be bigger than or equal to 1.');
        }

        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets receipt_type
     *
     * @return int
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param int $receipt_type The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
     *
     * @return self
     */
    public function setReceiptType($receipt_type)
    {

        if (($receipt_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $receipt_type when calling ShopReceipt., must be bigger than or equal to 0.');
        }

        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets seller_user_id
     *
     * @return int
     */
    public function getSellerUserId()
    {
        return $this->container['seller_user_id'];
    }

    /**
     * Sets seller_user_id
     *
     * @param int $seller_user_id The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
     *
     * @return self
     */
    public function setSellerUserId($seller_user_id)
    {

        if (($seller_user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $seller_user_id when calling ShopReceipt., must be bigger than or equal to 1.');
        }

        $this->container['seller_user_id'] = $seller_user_id;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return int
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param int $buyer_user_id The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
     *
     * @return self
     */
    public function setBuyerUserId($buyer_user_id)
    {

        if (($buyer_user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $buyer_user_id when calling ShopReceipt., must be bigger than or equal to 1.');
        }

        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_line
     *
     * @return string
     */
    public function getFirstLine()
    {
        return $this->container['first_line'];
    }

    /**
     * Sets first_line
     *
     * @param string $first_line The first address line string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setFirstLine($first_line)
    {
        $this->container['first_line'] = $first_line;

        return $this;
    }

    /**
     * Gets second_line
     *
     * @return string
     */
    public function getSecondLine()
    {
        return $this->container['second_line'];
    }

    /**
     * Sets second_line
     *
     * @param string $second_line The optional second address line string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setSecondLine($second_line)
    {
        $this->container['second_line'] = $second_line;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip The zip code string (not necessarily a number) for the recipient in the shipping address.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets formatted_address
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formatted_address'];
    }

    /**
     * Sets formatted_address
     *
     * @param string $formatted_address The formatted shipping address string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setFormattedAddress($formatted_address)
    {
        $this->container['formatted_address'] = $formatted_address;

        return $this;
    }

    /**
     * Gets country_iso
     *
     * @return string
     */
    public function getCountryIso()
    {
        return $this->container['country_iso'];
    }

    /**
     * Sets country_iso
     *
     * @param string $country_iso The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
     *
     * @return self
     */
    public function setCountryIso($country_iso)
    {
        $this->container['country_iso'] = $country_iso;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method The payment method string identifying purchaser's payment method, which must be one of: \\'cc\\' (credit card), \\'paypal\\', \\'check\\', \\'mo\\' (money order), \\'bt\\' (bank transfer), \\'other\\', \\'ideal\\', \\'sofort\\', \\'apple_pay\\', \\'google\\', \\'android_pay\\', \\'google_pay\\', \\'klarna\\', \\'k_pay_in_4\\' (klarna), or \\'k_financing\\' (klarna).
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_email
     *
     * @return string
     */
    public function getPaymentEmail()
    {
        return $this->container['payment_email'];
    }

    /**
     * Sets payment_email
     *
     * @param string $payment_email The email address string for the email address to which to send payment confirmation
     *
     * @return self
     */
    public function setPaymentEmail($payment_email)
    {
        $this->container['payment_email'] = $payment_email;

        return $this;
    }

    /**
     * Gets message_from_seller
     *
     * @return string
     */
    public function getMessageFromSeller()
    {
        return $this->container['message_from_seller'];
    }

    /**
     * Sets message_from_seller
     *
     * @param string $message_from_seller An optional message string from the seller.
     *
     * @return self
     */
    public function setMessageFromSeller($message_from_seller)
    {
        $this->container['message_from_seller'] = $message_from_seller;

        return $this;
    }

    /**
     * Gets message_from_buyer
     *
     * @return string
     */
    public function getMessageFromBuyer()
    {
        return $this->container['message_from_buyer'];
    }

    /**
     * Sets message_from_buyer
     *
     * @param string $message_from_buyer An optional message string from the buyer.
     *
     * @return self
     */
    public function setMessageFromBuyer($message_from_buyer)
    {
        $this->container['message_from_buyer'] = $message_from_buyer;

        return $this;
    }

    /**
     * Gets message_from_payment
     *
     * @return string
     */
    public function getMessageFromPayment()
    {
        return $this->container['message_from_payment'];
    }

    /**
     * Sets message_from_payment
     *
     * @param string $message_from_payment The machine-generated acknowledgement string from the payment system.
     *
     * @return self
     */
    public function setMessageFromPayment($message_from_payment)
    {
        $this->container['message_from_payment'] = $message_from_payment;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid When true, buyer paid for this purchase.
     *
     * @return self
     */
    public function setIsPaid($is_paid)
    {
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets is_shipped
     *
     * @return bool
     */
    public function getIsShipped()
    {
        return $this->container['is_shipped'];
    }

    /**
     * Sets is_shipped
     *
     * @param bool $is_shipped When true, seller shipped the products.
     *
     * @return self
     */
    public function setIsShipped($is_shipped)
    {
        $this->container['is_shipped'] = $is_shipped;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The receipt\\'s creation time, in epoch seconds.
     *
     * @return self
     */
    public function setCreateTimestamp($create_timestamp)
    {

        if (($create_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $create_timestamp when calling ShopReceipt., must be bigger than or equal to 946684800.');
        }

        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp The time of the last update to the receipt, in epoch seconds.
     *
     * @return self
     */
    public function setUpdateTimestamp($update_timestamp)
    {

        if (($update_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $update_timestamp when calling ShopReceipt., must be bigger than or equal to 946684800.');
        }

        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string $gift_message A gift message string the buyer requests delivered with the product.
     *
     * @return self
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }

    /**
     * Gets grandtotal
     *
     * @return Money
     */
    public function getGrandtotal()
    {
        return $this->container['grandtotal'];
    }

    /**
     * Sets grandtotal
     *
     * @param Money $grandtotal A number equal to the total_price minus the coupon discount plus tax and shipping costs.
     *
     * @return self
     */
    public function setGrandtotal($grandtotal)
    {
        $this->container['grandtotal'] = $grandtotal;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return Money
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param Money $subtotal A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return Money
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param Money $total_price A number equal to the sum of the individual listings\\' (price * quantity). Does not included tax or shipping costs.
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_shipping_cost
     *
     * @return Money
     */
    public function getTotalShippingCost()
    {
        return $this->container['total_shipping_cost'];
    }

    /**
     * Sets total_shipping_cost
     *
     * @param Money $total_shipping_cost A number equal to the total shipping cost of the receipt.
     *
     * @return self
     */
    public function setTotalShippingCost($total_shipping_cost)
    {
        $this->container['total_shipping_cost'] = $total_shipping_cost;

        return $this;
    }

    /**
     * Gets total_tax_cost
     *
     * @return Money
     */
    public function getTotalTaxCost()
    {
        return $this->container['total_tax_cost'];
    }

    /**
     * Sets total_tax_cost
     *
     * @param Money $total_tax_cost The total sales tax of the receipt.
     *
     * @return self
     */
    public function setTotalTaxCost($total_tax_cost)
    {
        $this->container['total_tax_cost'] = $total_tax_cost;

        return $this;
    }

    /**
     * Gets total_vat_cost
     *
     * @return Money
     */
    public function getTotalVatCost()
    {
        return $this->container['total_vat_cost'];
    }

    /**
     * Sets total_vat_cost
     *
     * @param Money $total_vat_cost A number equal to the total value-added tax (VAT) of the receipt.
     *
     * @return self
     */
    public function setTotalVatCost($total_vat_cost)
    {
        $this->container['total_vat_cost'] = $total_vat_cost;

        return $this;
    }

    /**
     * Gets discount_amt
     *
     * @return Money
     */
    public function getDiscountAmt()
    {
        return $this->container['discount_amt'];
    }

    /**
     * Sets discount_amt
     *
     * @param Money $discount_amt The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.
     *
     * @return self
     */
    public function setDiscountAmt($discount_amt)
    {
        $this->container['discount_amt'] = $discount_amt;

        return $this;
    }

    /**
     * Gets gift_wrap_price
     *
     * @return Money
     */
    public function getGiftWrapPrice()
    {
        return $this->container['gift_wrap_price'];
    }

    /**
     * Sets gift_wrap_price
     *
     * @param Money $gift_wrap_price The numeric price of gift wrap for this receipt.
     *
     * @return self
     */
    public function setGiftWrapPrice($gift_wrap_price)
    {
        $this->container['gift_wrap_price'] = $gift_wrap_price;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return ShopReceiptShipment[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param ShopReceiptShipment[] $shipments A list of shipment statements for this receipt.
     *
     * @return self
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


