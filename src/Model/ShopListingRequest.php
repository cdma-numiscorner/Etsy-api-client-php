<?php
/**
 * ShopListingRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * ShopListingRequest Class Doc Comment
 *
 * @category Class
 * @description A listing from a shop, which contains a product quantity, title, description, price, etc.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ShopListingRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShopListingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quantity' => 'int',
        'title' => 'string',
        'description' => 'string',
        'price' => 'float',
        'who_made' => 'string',
        'when_made' => 'string',
        'taxonomy_id' => 'int',
        'shipping_profile_id' => 'int',
        'materials' => 'string[]',
        'shop_section_id' => 'int',
        'processing_min' => 'int',
        'processing_max' => 'int',
        'tags' => 'string[]',
        'recipient' => 'string',
        'occasion' => 'string',
        'styles' => 'string[]',
        'item_weight' => 'float',
        'item_length' => 'float',
        'item_width' => 'float',
        'item_height' => 'float',
        'item_weight_unit' => 'string',
        'item_dimensions_unit' => 'string',
        'is_personalizable' => 'bool',
        'image_ids' => 'int[]',
        'is_supply' => 'bool',
        'is_customizable' => 'bool',
        'is_taxable' => 'bool',
        'is_private' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'quantity' => null,
        'title' => null,
        'description' => null,
        'price' => 'float',
        'who_made' => null,
        'when_made' => null,
        'taxonomy_id' => null,
        'shipping_profile_id' => null,
        'materials' => null,
        'shop_section_id' => null,
        'processing_min' => null,
        'processing_max' => null,
        'tags' => null,
        'recipient' => null,
        'occasion' => null,
        'styles' => null,
        'item_weight' => 'float',
        'item_length' => 'float',
        'item_width' => 'float',
        'item_height' => 'float',
        'item_weight_unit' => null,
        'item_dimensions_unit' => null,
        'is_personalizable' => null,
        'image_ids' => null,
        'is_supply' => null,
        'is_customizable' => null,
        'is_taxable' => null,
        'is_private' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantity' => 'quantity',
        'title' => 'title',
        'description' => 'description',
        'price' => 'price',
        'who_made' => 'who_made',
        'when_made' => 'when_made',
        'taxonomy_id' => 'taxonomy_id',
        'shipping_profile_id' => 'shipping_profile_id',
        'materials' => 'materials',
        'shop_section_id' => 'shop_section_id',
        'processing_min' => 'processing_min',
        'processing_max' => 'processing_max',
        'tags' => 'tags',
        'recipient' => 'recipient',
        'occasion' => 'occasion',
        'styles' => 'styles',
        'item_weight' => 'item_weight',
        'item_length' => 'item_length',
        'item_width' => 'item_width',
        'item_height' => 'item_height',
        'item_weight_unit' => 'item_weight_unit',
        'item_dimensions_unit' => 'item_dimensions_unit',
        'is_personalizable' => 'is_personalizable',
        'image_ids' => 'image_ids',
        'is_supply' => 'is_supply',
        'is_customizable' => 'is_customizable',
        'is_taxable' => 'is_taxable',
        'is_private' => 'is_private'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantity' => 'setQuantity',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'price' => 'setPrice',
        'who_made' => 'setWhoMade',
        'when_made' => 'setWhenMade',
        'taxonomy_id' => 'setTaxonomyId',
        'shipping_profile_id' => 'setShippingProfileId',
        'materials' => 'setMaterials',
        'shop_section_id' => 'setShopSectionId',
        'processing_min' => 'setProcessingMin',
        'processing_max' => 'setProcessingMax',
        'tags' => 'setTags',
        'recipient' => 'setRecipient',
        'occasion' => 'setOccasion',
        'styles' => 'setStyles',
        'item_weight' => 'setItemWeight',
        'item_length' => 'setItemLength',
        'item_width' => 'setItemWidth',
        'item_height' => 'setItemHeight',
        'item_weight_unit' => 'setItemWeightUnit',
        'item_dimensions_unit' => 'setItemDimensionsUnit',
        'is_personalizable' => 'setIsPersonalizable',
        'image_ids' => 'setImageIds',
        'is_supply' => 'setIsSupply',
        'is_customizable' => 'setIsCustomizable',
        'is_taxable' => 'setIsTaxable',
        'is_private' => 'setIsPrivate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantity' => 'getQuantity',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'price' => 'getPrice',
        'who_made' => 'getWhoMade',
        'when_made' => 'getWhenMade',
        'taxonomy_id' => 'getTaxonomyId',
        'shipping_profile_id' => 'getShippingProfileId',
        'materials' => 'getMaterials',
        'shop_section_id' => 'getShopSectionId',
        'processing_min' => 'getProcessingMin',
        'processing_max' => 'getProcessingMax',
        'tags' => 'getTags',
        'recipient' => 'getRecipient',
        'occasion' => 'getOccasion',
        'styles' => 'getStyles',
        'item_weight' => 'getItemWeight',
        'item_length' => 'getItemLength',
        'item_width' => 'getItemWidth',
        'item_height' => 'getItemHeight',
        'item_weight_unit' => 'getItemWeightUnit',
        'item_dimensions_unit' => 'getItemDimensionsUnit',
        'is_personalizable' => 'getIsPersonalizable',
        'image_ids' => 'getImageIds',
        'is_supply' => 'getIsSupply',
        'is_customizable' => 'getIsCustomizable',
        'is_taxable' => 'getIsTaxable',
        'is_private' => 'getIsPrivate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const WHO_MADE_I_DID = 'i_did';
    const WHO_MADE_SOMEONE_ELSE = 'someone_else';
    const WHO_MADE_COLLECTIVE = 'collective';
    const WHEN_MADE_MADE_TO_ORDER = 'made_to_order';
    const WHEN_MADE__2020_2021 = '2020_2021';
    const WHEN_MADE__2010_2019 = '2010_2019';
    const WHEN_MADE__2002_2009 = '2002_2009';
    const WHEN_MADE_BEFORE_2002 = 'before_2002';
    const WHEN_MADE__2000_2001 = '2000_2001';
    const WHEN_MADE__1990S = '1990s';
    const WHEN_MADE__1980S = '1980s';
    const WHEN_MADE__1970S = '1970s';
    const WHEN_MADE__1960S = '1960s';
    const WHEN_MADE__1950S = '1950s';
    const WHEN_MADE__1940S = '1940s';
    const WHEN_MADE__1930S = '1930s';
    const WHEN_MADE__1920S = '1920s';
    const WHEN_MADE__1910S = '1910s';
    const WHEN_MADE__1900S = '1900s';
    const WHEN_MADE__1800S = '1800s';
    const WHEN_MADE__1700S = '1700s';
    const WHEN_MADE_BEFORE_1700 = 'before_1700';
    const RECIPIENT_MEN = 'men';
    const RECIPIENT_WOMEN = 'women';
    const RECIPIENT_UNISEX_ADULTS = 'unisex_adults';
    const RECIPIENT_TEEN_BOYS = 'teen_boys';
    const RECIPIENT_TEEN_GIRLS = 'teen_girls';
    const RECIPIENT_TEENS = 'teens';
    const RECIPIENT_BOYS = 'boys';
    const RECIPIENT_GIRLS = 'girls';
    const RECIPIENT_CHILDREN = 'children';
    const RECIPIENT_BABY_BOYS = 'baby_boys';
    const RECIPIENT_BABY_GIRLS = 'baby_girls';
    const RECIPIENT_BABIES = 'babies';
    const RECIPIENT_BIRDS = 'birds';
    const RECIPIENT_CATS = 'cats';
    const RECIPIENT_DOGS = 'dogs';
    const RECIPIENT_PETS = 'pets';
    const RECIPIENT_NOT_SPECIFIED = 'not_specified';
    const OCCASION_ANNIVERSARY = 'anniversary';
    const OCCASION_BAPTISM = 'baptism';
    const OCCASION_BAR_OR_BAT_MITZVAH = 'bar_or_bat_mitzvah';
    const OCCASION_BIRTHDAY = 'birthday';
    const OCCASION_CANADA_DAY = 'canada_day';
    const OCCASION_CHINESE_NEW_YEAR = 'chinese_new_year';
    const OCCASION_CINCO_DE_MAYO = 'cinco_de_mayo';
    const OCCASION_CONFIRMATION = 'confirmation';
    const OCCASION_CHRISTMAS = 'christmas';
    const OCCASION_DAY_OF_THE_DEAD = 'day_of_the_dead';
    const OCCASION_EASTER = 'easter';
    const OCCASION_EID = 'eid';
    const OCCASION_ENGAGEMENT = 'engagement';
    const OCCASION_FATHERS_DAY = 'fathers_day';
    const OCCASION_GET_WELL = 'get_well';
    const OCCASION_GRADUATION = 'graduation';
    const OCCASION_HALLOWEEN = 'halloween';
    const OCCASION_HANUKKAH = 'hanukkah';
    const OCCASION_HOUSEWARMING = 'housewarming';
    const OCCASION_KWANZAA = 'kwanzaa';
    const OCCASION_PROM = 'prom';
    const OCCASION_JULY_4TH = 'july_4th';
    const OCCASION_MOTHERS_DAY = 'mothers_day';
    const OCCASION_NEW_BABY = 'new_baby';
    const OCCASION_NEW_YEARS = 'new_years';
    const OCCASION_QUINCEANERA = 'quinceanera';
    const OCCASION_RETIREMENT = 'retirement';
    const OCCASION_ST_PATRICKS_DAY = 'st_patricks_day';
    const OCCASION_SWEET_16 = 'sweet_16';
    const OCCASION_SYMPATHY = 'sympathy';
    const OCCASION_THANKSGIVING = 'thanksgiving';
    const OCCASION_VALENTINES = 'valentines';
    const OCCASION_WEDDING = 'wedding';
    const ITEM_WEIGHT_UNIT_OZ = 'oz';
    const ITEM_WEIGHT_UNIT_LB = 'lb';
    const ITEM_WEIGHT_UNIT_G = 'g';
    const ITEM_WEIGHT_UNIT_KG = 'kg';
    const ITEM_DIMENSIONS_UNIT_IN = 'in';
    const ITEM_DIMENSIONS_UNIT_FT = 'ft';
    const ITEM_DIMENSIONS_UNIT_MM = 'mm';
    const ITEM_DIMENSIONS_UNIT_CM = 'cm';
    const ITEM_DIMENSIONS_UNIT_M = 'm';
    const ITEM_DIMENSIONS_UNIT_YD = 'yd';
    const ITEM_DIMENSIONS_UNIT_INCHES = 'inches';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoMadeAllowableValues()
    {
        return [
            self::WHO_MADE_I_DID,
            self::WHO_MADE_SOMEONE_ELSE,
            self::WHO_MADE_COLLECTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhenMadeAllowableValues()
    {
        return [
            self::WHEN_MADE_MADE_TO_ORDER,
            self::WHEN_MADE__2020_2021,
            self::WHEN_MADE__2010_2019,
            self::WHEN_MADE__2002_2009,
            self::WHEN_MADE_BEFORE_2002,
            self::WHEN_MADE__2000_2001,
            self::WHEN_MADE__1990S,
            self::WHEN_MADE__1980S,
            self::WHEN_MADE__1970S,
            self::WHEN_MADE__1960S,
            self::WHEN_MADE__1950S,
            self::WHEN_MADE__1940S,
            self::WHEN_MADE__1930S,
            self::WHEN_MADE__1920S,
            self::WHEN_MADE__1910S,
            self::WHEN_MADE__1900S,
            self::WHEN_MADE__1800S,
            self::WHEN_MADE__1700S,
            self::WHEN_MADE_BEFORE_1700,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecipientAllowableValues()
    {
        return [
            self::RECIPIENT_MEN,
            self::RECIPIENT_WOMEN,
            self::RECIPIENT_UNISEX_ADULTS,
            self::RECIPIENT_TEEN_BOYS,
            self::RECIPIENT_TEEN_GIRLS,
            self::RECIPIENT_TEENS,
            self::RECIPIENT_BOYS,
            self::RECIPIENT_GIRLS,
            self::RECIPIENT_CHILDREN,
            self::RECIPIENT_BABY_BOYS,
            self::RECIPIENT_BABY_GIRLS,
            self::RECIPIENT_BABIES,
            self::RECIPIENT_BIRDS,
            self::RECIPIENT_CATS,
            self::RECIPIENT_DOGS,
            self::RECIPIENT_PETS,
            self::RECIPIENT_NOT_SPECIFIED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOccasionAllowableValues()
    {
        return [
            self::OCCASION_ANNIVERSARY,
            self::OCCASION_BAPTISM,
            self::OCCASION_BAR_OR_BAT_MITZVAH,
            self::OCCASION_BIRTHDAY,
            self::OCCASION_CANADA_DAY,
            self::OCCASION_CHINESE_NEW_YEAR,
            self::OCCASION_CINCO_DE_MAYO,
            self::OCCASION_CONFIRMATION,
            self::OCCASION_CHRISTMAS,
            self::OCCASION_DAY_OF_THE_DEAD,
            self::OCCASION_EASTER,
            self::OCCASION_EID,
            self::OCCASION_ENGAGEMENT,
            self::OCCASION_FATHERS_DAY,
            self::OCCASION_GET_WELL,
            self::OCCASION_GRADUATION,
            self::OCCASION_HALLOWEEN,
            self::OCCASION_HANUKKAH,
            self::OCCASION_HOUSEWARMING,
            self::OCCASION_KWANZAA,
            self::OCCASION_PROM,
            self::OCCASION_JULY_4TH,
            self::OCCASION_MOTHERS_DAY,
            self::OCCASION_NEW_BABY,
            self::OCCASION_NEW_YEARS,
            self::OCCASION_QUINCEANERA,
            self::OCCASION_RETIREMENT,
            self::OCCASION_ST_PATRICKS_DAY,
            self::OCCASION_SWEET_16,
            self::OCCASION_SYMPATHY,
            self::OCCASION_THANKSGIVING,
            self::OCCASION_VALENTINES,
            self::OCCASION_WEDDING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemWeightUnitAllowableValues()
    {
        return [
            self::ITEM_WEIGHT_UNIT_OZ,
            self::ITEM_WEIGHT_UNIT_LB,
            self::ITEM_WEIGHT_UNIT_G,
            self::ITEM_WEIGHT_UNIT_KG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemDimensionsUnitAllowableValues()
    {
        return [
            self::ITEM_DIMENSIONS_UNIT_IN,
            self::ITEM_DIMENSIONS_UNIT_FT,
            self::ITEM_DIMENSIONS_UNIT_MM,
            self::ITEM_DIMENSIONS_UNIT_CM,
            self::ITEM_DIMENSIONS_UNIT_M,
            self::ITEM_DIMENSIONS_UNIT_YD,
            self::ITEM_DIMENSIONS_UNIT_INCHES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['who_made'] = $data['who_made'] ?? null;
        $this->container['when_made'] = $data['when_made'] ?? null;
        $this->container['taxonomy_id'] = $data['taxonomy_id'] ?? null;
        $this->container['shipping_profile_id'] = $data['shipping_profile_id'] ?? null;
        $this->container['materials'] = $data['materials'] ?? null;
        $this->container['shop_section_id'] = $data['shop_section_id'] ?? null;
        $this->container['processing_min'] = $data['processing_min'] ?? null;
        $this->container['processing_max'] = $data['processing_max'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['recipient'] = $data['recipient'] ?? null;
        $this->container['occasion'] = $data['occasion'] ?? null;
        $this->container['styles'] = $data['styles'] ?? null;
        $this->container['item_weight'] = $data['item_weight'] ?? null;
        $this->container['item_length'] = $data['item_length'] ?? null;
        $this->container['item_width'] = $data['item_width'] ?? null;
        $this->container['item_height'] = $data['item_height'] ?? null;
        $this->container['item_weight_unit'] = $data['item_weight_unit'] ?? null;
        $this->container['item_dimensions_unit'] = $data['item_dimensions_unit'] ?? null;
        $this->container['is_personalizable'] = $data['is_personalizable'] ?? null;
        $this->container['image_ids'] = $data['image_ids'] ?? null;
        $this->container['is_supply'] = $data['is_supply'] ?? null;
        $this->container['is_customizable'] = $data['is_customizable'] ?? null;
        $this->container['is_taxable'] = $data['is_taxable'] ?? null;
        $this->container['is_private'] = $data['is_private'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (($this->container['price'] > 50000)) {
            $invalidProperties[] = "invalid value for 'price', must be smaller than or equal to 50000.";
        }

        if (($this->container['price'] < 0.2)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 0.2.";
        }

        if ($this->container['who_made'] === null) {
            $invalidProperties[] = "'who_made' can't be null";
        }
        $allowedValues = $this->getWhoMadeAllowableValues();
        if (!is_null($this->container['who_made']) && !in_array($this->container['who_made'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'who_made', must be one of '%s'",
                $this->container['who_made'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['when_made'] === null) {
            $invalidProperties[] = "'when_made' can't be null";
        }
        $allowedValues = $this->getWhenMadeAllowableValues();
        if (!is_null($this->container['when_made']) && !in_array($this->container['when_made'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'when_made', must be one of '%s'",
                $this->container['when_made'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['taxonomy_id'] === null) {
            $invalidProperties[] = "'taxonomy_id' can't be null";
        }
        if (($this->container['taxonomy_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'taxonomy_id', must be bigger than or equal to 1.";
        }

        if ($this->container['shipping_profile_id'] === null) {
            $invalidProperties[] = "'shipping_profile_id' can't be null";
        }
        if (($this->container['shipping_profile_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shipping_profile_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shop_section_id']) && ($this->container['shop_section_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shop_section_id', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRecipientAllowableValues();
        if (!is_null($this->container['recipient']) && !in_array($this->container['recipient'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recipient', must be one of '%s'",
                $this->container['recipient'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOccasionAllowableValues();
        if (!is_null($this->container['occasion']) && !in_array($this->container['occasion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'occasion', must be one of '%s'",
                $this->container['occasion'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['item_weight']) && ($this->container['item_weight'] > 1.79769313486E+308)) {
            $invalidProperties[] = "invalid value for 'item_weight', must be smaller than or equal to 1.79769313486E+308.";
        }

        if (!is_null($this->container['item_weight']) && ($this->container['item_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['item_length']) && ($this->container['item_length'] > 1.79769313486E+308)) {
            $invalidProperties[] = "invalid value for 'item_length', must be smaller than or equal to 1.79769313486E+308.";
        }

        if (!is_null($this->container['item_length']) && ($this->container['item_length'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_length', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['item_width']) && ($this->container['item_width'] > 1.79769313486E+308)) {
            $invalidProperties[] = "invalid value for 'item_width', must be smaller than or equal to 1.79769313486E+308.";
        }

        if (!is_null($this->container['item_width']) && ($this->container['item_width'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_width', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['item_height']) && ($this->container['item_height'] > 1.79769313486E+308)) {
            $invalidProperties[] = "invalid value for 'item_height', must be smaller than or equal to 1.79769313486E+308.";
        }

        if (!is_null($this->container['item_height']) && ($this->container['item_height'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_height', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getItemWeightUnitAllowableValues();
        if (!is_null($this->container['item_weight_unit']) && !in_array($this->container['item_weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_weight_unit', must be one of '%s'",
                $this->container['item_weight_unit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getItemDimensionsUnitAllowableValues();
        if (!is_null($this->container['item_dimensions_unit']) && !in_array($this->container['item_dimensions_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_dimensions_unit', must be one of '%s'",
                $this->container['item_dimensions_unit'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The listing's title string. Valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{P}\\p{Sm}\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description string of the product for sale in the listing.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The getInventory method requests exact prices for available offerings.
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (($price > 50000)) {
            throw new \InvalidArgumentException('invalid value for $price when calling ShopListingRequest., must be smaller than or equal to 50000.');
        }
        if (($price < 0.2)) {
            throw new \InvalidArgumentException('invalid value for $price when calling ShopListingRequest., must be bigger than or equal to 0.2.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets who_made
     *
     * @return string
     */
    public function getWhoMade()
    {
        return $this->container['who_made'];
    }

    /**
     * Sets who_made
     *
     * @param string $who_made An enumerated string inidcated who made the product. Helps buyers locate the listing under the Handmade heading.
     *
     * @return self
     */
    public function setWhoMade($who_made)
    {
        $allowedValues = $this->getWhoMadeAllowableValues();
        if (!in_array($who_made, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'who_made', must be one of '%s'",
                    $who_made,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_made'] = $who_made;

        return $this;
    }

    /**
     * Gets when_made
     *
     * @return string
     */
    public function getWhenMade()
    {
        return $this->container['when_made'];
    }

    /**
     * Sets when_made
     *
     * @param string $when_made An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading.
     *
     * @return self
     */
    public function setWhenMade($when_made)
    {
        $allowedValues = $this->getWhenMadeAllowableValues();
        if (!in_array($when_made, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'when_made', must be one of '%s'",
                    $when_made,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['when_made'] = $when_made;

        return $this;
    }

    /**
     * Gets taxonomy_id
     *
     * @return int
     */
    public function getTaxonomyId()
    {
        return $this->container['taxonomy_id'];
    }

    /**
     * Sets taxonomy_id
     *
     * @param int $taxonomy_id The numeric taxonomy ID of the listing. The seller manages listing taxonomy IDs for their shop.  [See SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) for more information.
     *
     * @return self
     */
    public function setTaxonomyId($taxonomy_id)
    {

        if (($taxonomy_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $taxonomy_id when calling ShopListingRequest., must be bigger than or equal to 1.');
        }

        $this->container['taxonomy_id'] = $taxonomy_id;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return int
     */
    public function getShippingProfileId()
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing.
     *
     * @return self
     */
    public function setShippingProfileId($shipping_profile_id)
    {

        if (($shipping_profile_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shipping_profile_id when calling ShopListingRequest., must be bigger than or equal to 1.');
        }

        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return string[]|null
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param string[]|null $materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
     *
     * @return self
     */
    public function setMaterials($materials)
    {
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets shop_section_id
     *
     * @return int|null
     */
    public function getShopSectionId()
    {
        return $this->container['shop_section_id'];
    }

    /**
     * Sets shop_section_id
     *
     * @param int|null $shop_section_id The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
     *
     * @return self
     */
    public function setShopSectionId($shop_section_id)
    {

        if (!is_null($shop_section_id) && ($shop_section_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shop_section_id when calling ShopListingRequest., must be bigger than or equal to 1.');
        }

        $this->container['shop_section_id'] = $shop_section_id;

        return $this;
    }

    /**
     * Gets processing_min
     *
     * @return int|null
     */
    public function getProcessingMin()
    {
        return $this->container['processing_min'];
    }

    /**
     * Sets processing_min
     *
     * @param int|null $processing_min The minimum number of days required to process this listing. Default value is null.
     *
     * @return self
     */
    public function setProcessingMin($processing_min)
    {
        $this->container['processing_min'] = $processing_min;

        return $this;
    }

    /**
     * Gets processing_max
     *
     * @return int|null
     */
    public function getProcessingMax()
    {
        return $this->container['processing_max'];
    }

    /**
     * Sets processing_max
     *
     * @param int|null $processing_max The maximum number of days required to process this listing. Default value is null.
     *
     * @return self
     */
    public function setProcessingMax($processing_max)
    {
        $this->container['processing_max'] = $processing_max;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of tag strings for the listing. Valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}\\-'™©®]/u) Default value is null.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string|null $recipient An enumerated string indicating a person for whom this product would make an appropriate gift. Default value is null.
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        $allowedValues = $this->getRecipientAllowableValues();
        if (!is_null($recipient) && !in_array($recipient, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recipient', must be one of '%s'",
                    $recipient,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets occasion
     *
     * @return string|null
     */
    public function getOccasion()
    {
        return $this->container['occasion'];
    }

    /**
     * Sets occasion
     *
     * @param string|null $occasion An enumerated string indicating an occassion for which this product would make an appropriate gift. Default value is null.
     *
     * @return self
     */
    public function setOccasion($occasion)
    {
        $allowedValues = $this->getOccasionAllowableValues();
        if (!is_null($occasion) && !in_array($occasion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'occasion', must be one of '%s'",
                    $occasion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['occasion'] = $occasion;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return string[]|null
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param string[]|null $styles An array of style strings for this listing, each of which is free-form text string such as \"Formal\", or \"Steampunk\". A Listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
     *
     * @return self
     */
    public function setStyles($styles)
    {
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets item_weight
     *
     * @return float|null
     */
    public function getItemWeight()
    {
        return $this->container['item_weight'];
    }

    /**
     * Sets item_weight
     *
     * @param float|null $item_weight The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null.
     *
     * @return self
     */
    public function setItemWeight($item_weight)
    {

        if (!is_null($item_weight) && ($item_weight > 1.79769313486E+308)) {
            throw new \InvalidArgumentException('invalid value for $item_weight when calling ShopListingRequest., must be smaller than or equal to 1.79769313486E+308.');
        }
        if (!is_null($item_weight) && ($item_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $item_weight when calling ShopListingRequest., must be bigger than or equal to 0.');
        }

        $this->container['item_weight'] = $item_weight;

        return $this;
    }

    /**
     * Gets item_length
     *
     * @return float|null
     */
    public function getItemLength()
    {
        return $this->container['item_length'];
    }

    /**
     * Sets item_length
     *
     * @param float|null $item_length The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null.
     *
     * @return self
     */
    public function setItemLength($item_length)
    {

        if (!is_null($item_length) && ($item_length > 1.79769313486E+308)) {
            throw new \InvalidArgumentException('invalid value for $item_length when calling ShopListingRequest., must be smaller than or equal to 1.79769313486E+308.');
        }
        if (!is_null($item_length) && ($item_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $item_length when calling ShopListingRequest., must be bigger than or equal to 0.');
        }

        $this->container['item_length'] = $item_length;

        return $this;
    }

    /**
     * Gets item_width
     *
     * @return float|null
     */
    public function getItemWidth()
    {
        return $this->container['item_width'];
    }

    /**
     * Sets item_width
     *
     * @param float|null $item_width The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null.
     *
     * @return self
     */
    public function setItemWidth($item_width)
    {

        if (!is_null($item_width) && ($item_width > 1.79769313486E+308)) {
            throw new \InvalidArgumentException('invalid value for $item_width when calling ShopListingRequest., must be smaller than or equal to 1.79769313486E+308.');
        }
        if (!is_null($item_width) && ($item_width < 0)) {
            throw new \InvalidArgumentException('invalid value for $item_width when calling ShopListingRequest., must be bigger than or equal to 0.');
        }

        $this->container['item_width'] = $item_width;

        return $this;
    }

    /**
     * Gets item_height
     *
     * @return float|null
     */
    public function getItemHeight()
    {
        return $this->container['item_height'];
    }

    /**
     * Sets item_height
     *
     * @param float|null $item_height The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null.
     *
     * @return self
     */
    public function setItemHeight($item_height)
    {

        if (!is_null($item_height) && ($item_height > 1.79769313486E+308)) {
            throw new \InvalidArgumentException('invalid value for $item_height when calling ShopListingRequest., must be smaller than or equal to 1.79769313486E+308.');
        }
        if (!is_null($item_height) && ($item_height < 0)) {
            throw new \InvalidArgumentException('invalid value for $item_height when calling ShopListingRequest., must be bigger than or equal to 0.');
        }

        $this->container['item_height'] = $item_height;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string|null
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string|null $item_weight_unit A string defining the units used to measure the weight of the product. Default value is null.
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        $allowedValues = $this->getItemWeightUnitAllowableValues();
        if (!is_null($item_weight_unit) && !in_array($item_weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_weight_unit', must be one of '%s'",
                    $item_weight_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets item_dimensions_unit
     *
     * @return string|null
     */
    public function getItemDimensionsUnit()
    {
        return $this->container['item_dimensions_unit'];
    }

    /**
     * Sets item_dimensions_unit
     *
     * @param string|null $item_dimensions_unit A string defining the units used to measure the dimensions of the product. Default value is null.
     *
     * @return self
     */
    public function setItemDimensionsUnit($item_dimensions_unit)
    {
        $allowedValues = $this->getItemDimensionsUnitAllowableValues();
        if (!is_null($item_dimensions_unit) && !in_array($item_dimensions_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_dimensions_unit', must be one of '%s'",
                    $item_dimensions_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_dimensions_unit'] = $item_dimensions_unit;

        return $this;
    }

    /**
     * Gets is_personalizable
     *
     * @return bool|null
     */
    public function getIsPersonalizable()
    {
        return $this->container['is_personalizable'];
    }

    /**
     * Sets is_personalizable
     *
     * @param bool|null $is_personalizable When true, this listing is personalizable. The default value is null.
     *
     * @return self
     */
    public function setIsPersonalizable($is_personalizable)
    {
        $this->container['is_personalizable'] = $is_personalizable;

        return $this;
    }

    /**
     * Gets image_ids
     *
     * @return int[]|null
     */
    public function getImageIds()
    {
        return $this->container['image_ids'];
    }

    /**
     * Sets image_ids
     *
     * @param int[]|null $image_ids An array of numeric image IDs of the images in a listing, which can include up to 10 images.
     *
     * @return self
     */
    public function setImageIds($image_ids)
    {
        $this->container['image_ids'] = $image_ids;

        return $this;
    }

    /**
     * Gets is_supply
     *
     * @return bool|null
     */
    public function getIsSupply()
    {
        return $this->container['is_supply'];
    }

    /**
     * Sets is_supply
     *
     * @param bool|null $is_supply When true, tags the listing as a supply product. Helps buyers locate the listing under the Supplies heading.
     *
     * @return self
     */
    public function setIsSupply($is_supply)
    {
        $this->container['is_supply'] = $is_supply;

        return $this;
    }

    /**
     * Gets is_customizable
     *
     * @return bool|null
     */
    public function getIsCustomizable()
    {
        return $this->container['is_customizable'];
    }

    /**
     * Sets is_customizable
     *
     * @param bool|null $is_customizable When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
     *
     * @return self
     */
    public function setIsCustomizable($is_customizable)
    {
        $this->container['is_customizable'] = $is_customizable;

        return $this;
    }

    /**
     * Gets is_taxable
     *
     * @return bool|null
     */
    public function getIsTaxable()
    {
        return $this->container['is_taxable'];
    }

    /**
     * Sets is_taxable
     *
     * @param bool|null $is_taxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
     *
     * @return self
     */
    public function setIsTaxable($is_taxable)
    {
        $this->container['is_taxable'] = $is_taxable;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private When true, this is a private listing intendend for a specific buyer and hidden from shop view.
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


