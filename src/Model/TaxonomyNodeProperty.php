<?php
/**
 * TaxonomyNodeProperty
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * TaxonomyNodeProperty Class Doc Comment
 *
 * @category Class
 * @description A property from tge node in the tree of categories that are used for Listings.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TaxonomyNodeProperty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxonomyNodeProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_id' => 'int',
        'name' => 'string',
        'display_name' => 'string',
        'scales' => 'TaxonomyPropertyScale[]',
        'is_required' => 'bool',
        'supports_attributes' => 'bool',
        'supports_variations' => 'bool',
        'is_multivalued' => 'bool',
        'possible_values' => 'TaxonomyPropertyValue[]',
        'selected_values' => 'TaxonomyPropertyValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'property_id' => null,
        'name' => null,
        'display_name' => null,
        'scales' => null,
        'is_required' => null,
        'supports_attributes' => null,
        'supports_variations' => null,
        'is_multivalued' => null,
        'possible_values' => null,
        'selected_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'property_id',
        'name' => 'name',
        'display_name' => 'display_name',
        'scales' => 'scales',
        'is_required' => 'is_required',
        'supports_attributes' => 'supports_attributes',
        'supports_variations' => 'supports_variations',
        'is_multivalued' => 'is_multivalued',
        'possible_values' => 'possible_values',
        'selected_values' => 'selected_values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'scales' => 'setScales',
        'is_required' => 'setIsRequired',
        'supports_attributes' => 'setSupportsAttributes',
        'supports_variations' => 'setSupportsVariations',
        'is_multivalued' => 'setIsMultivalued',
        'possible_values' => 'setPossibleValues',
        'selected_values' => 'setSelectedValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'scales' => 'getScales',
        'is_required' => 'getIsRequired',
        'supports_attributes' => 'getSupportsAttributes',
        'supports_variations' => 'getSupportsVariations',
        'is_multivalued' => 'getIsMultivalued',
        'possible_values' => 'getPossibleValues',
        'selected_values' => 'getSelectedValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = $data['property_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['scales'] = $data['scales'] ?? null;
        $this->container['is_required'] = $data['is_required'] ?? null;
        $this->container['supports_attributes'] = $data['supports_attributes'] ?? null;
        $this->container['supports_variations'] = $data['supports_variations'] ?? null;
        $this->container['is_multivalued'] = $data['is_multivalued'] ?? null;
        $this->container['possible_values'] = $data['possible_values'] ?? null;
        $this->container['selected_values'] = $data['selected_values'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['property_id'] === null) {
            $invalidProperties[] = "'property_id' can't be null";
        }
        if (($this->container['property_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'property_id', must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['scales'] === null) {
            $invalidProperties[] = "'scales' can't be null";
        }
        if ($this->container['is_required'] === null) {
            $invalidProperties[] = "'is_required' can't be null";
        }
        if ($this->container['supports_attributes'] === null) {
            $invalidProperties[] = "'supports_attributes' can't be null";
        }
        if ($this->container['supports_variations'] === null) {
            $invalidProperties[] = "'supports_variations' can't be null";
        }
        if ($this->container['is_multivalued'] === null) {
            $invalidProperties[] = "'is_multivalued' can't be null";
        }
        if ($this->container['possible_values'] === null) {
            $invalidProperties[] = "'possible_values' can't be null";
        }
        if ($this->container['selected_values'] === null) {
            $invalidProperties[] = "'selected_values' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return int
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int $property_id The ID of the property.
     *
     * @return self
     */
    public function setPropertyId($property_id)
    {

        if (($property_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $property_id when calling TaxonomyNodeProperty., must be bigger than or equal to 1.');
        }

        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the property.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The name used in user interfaces.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets scales
     *
     * @return TaxonomyPropertyScale[]
     */
    public function getScales()
    {
        return $this->container['scales'];
    }

    /**
     * Sets scales
     *
     * @param TaxonomyPropertyScale[] $scales A list of available scales.
     *
     * @return self
     */
    public function setScales($scales)
    {
        $this->container['scales'] = $scales;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool $is_required Is this attribute required for listings in this category?
     *
     * @return self
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets supports_attributes
     *
     * @return bool
     */
    public function getSupportsAttributes()
    {
        return $this->container['supports_attributes'];
    }

    /**
     * Sets supports_attributes
     *
     * @param bool $supports_attributes Can this property be used in listing attributes?
     *
     * @return self
     */
    public function setSupportsAttributes($supports_attributes)
    {
        $this->container['supports_attributes'] = $supports_attributes;

        return $this;
    }

    /**
     * Gets supports_variations
     *
     * @return bool
     */
    public function getSupportsVariations()
    {
        return $this->container['supports_variations'];
    }

    /**
     * Sets supports_variations
     *
     * @param bool $supports_variations Can this property be used in listing variations?
     *
     * @return self
     */
    public function setSupportsVariations($supports_variations)
    {
        $this->container['supports_variations'] = $supports_variations;

        return $this;
    }

    /**
     * Gets is_multivalued
     *
     * @return bool
     */
    public function getIsMultivalued()
    {
        return $this->container['is_multivalued'];
    }

    /**
     * Sets is_multivalued
     *
     * @param bool $is_multivalued Can this property have multiple values?
     *
     * @return self
     */
    public function setIsMultivalued($is_multivalued)
    {
        $this->container['is_multivalued'] = $is_multivalued;

        return $this;
    }

    /**
     * Gets possible_values
     *
     * @return TaxonomyPropertyValue[]
     */
    public function getPossibleValues()
    {
        return $this->container['possible_values'];
    }

    /**
     * Sets possible_values
     *
     * @param TaxonomyPropertyValue[] $possible_values A list of allowed values.
     *
     * @return self
     */
    public function setPossibleValues($possible_values)
    {
        $this->container['possible_values'] = $possible_values;

        return $this;
    }

    /**
     * Gets selected_values
     *
     * @return TaxonomyPropertyValue[]
     */
    public function getSelectedValues()
    {
        return $this->container['selected_values'];
    }

    /**
     * Sets selected_values
     *
     * @param TaxonomyPropertyValue[] $selected_values A list of values that are always selected for the given category.
     *
     * @return self
     */
    public function setSelectedValues($selected_values)
    {
        $this->container['selected_values'] = $selected_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


