<?php
/**
 * Payment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @description Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Payment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_id' => 'int',
        'buyer_user_id' => 'int',
        'shop_id' => 'int',
        'receipt_id' => 'int',
        'amount_gross' => 'Money',
        'amount_fees' => 'Money',
        'amount_net' => 'Money',
        'posted_gross' => 'Money',
        'posted_fees' => 'Money',
        'posted_net' => 'Money',
        'adjusted_gross' => 'Money',
        'adjusted_fees' => 'Money',
        'adjusted_net' => 'Money',
        'currency' => 'string',
        'shop_currency' => 'string',
        'buyer_currency' => 'string',
        'shipping_user_id' => 'int',
        'shipping_address_id' => 'int',
        'billing_address_id' => 'int',
        'status' => 'string',
        'shipped_timestamp' => 'int',
        'create_timestamp' => 'int',
        'update_timestamp' => 'int',
        'payment_adjustments' => 'PaymentAdjustment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_id' => null,
        'buyer_user_id' => null,
        'shop_id' => null,
        'receipt_id' => null,
        'amount_gross' => null,
        'amount_fees' => null,
        'amount_net' => null,
        'posted_gross' => null,
        'posted_fees' => null,
        'posted_net' => null,
        'adjusted_gross' => null,
        'adjusted_fees' => null,
        'adjusted_net' => null,
        'currency' => null,
        'shop_currency' => null,
        'buyer_currency' => null,
        'shipping_user_id' => null,
        'shipping_address_id' => null,
        'billing_address_id' => null,
        'status' => null,
        'shipped_timestamp' => null,
        'create_timestamp' => null,
        'update_timestamp' => null,
        'payment_adjustments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_id' => 'payment_id',
        'buyer_user_id' => 'buyer_user_id',
        'shop_id' => 'shop_id',
        'receipt_id' => 'receipt_id',
        'amount_gross' => 'amount_gross',
        'amount_fees' => 'amount_fees',
        'amount_net' => 'amount_net',
        'posted_gross' => 'posted_gross',
        'posted_fees' => 'posted_fees',
        'posted_net' => 'posted_net',
        'adjusted_gross' => 'adjusted_gross',
        'adjusted_fees' => 'adjusted_fees',
        'adjusted_net' => 'adjusted_net',
        'currency' => 'currency',
        'shop_currency' => 'shop_currency',
        'buyer_currency' => 'buyer_currency',
        'shipping_user_id' => 'shipping_user_id',
        'shipping_address_id' => 'shipping_address_id',
        'billing_address_id' => 'billing_address_id',
        'status' => 'status',
        'shipped_timestamp' => 'shipped_timestamp',
        'create_timestamp' => 'create_timestamp',
        'update_timestamp' => 'update_timestamp',
        'payment_adjustments' => 'payment_adjustments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_id' => 'setPaymentId',
        'buyer_user_id' => 'setBuyerUserId',
        'shop_id' => 'setShopId',
        'receipt_id' => 'setReceiptId',
        'amount_gross' => 'setAmountGross',
        'amount_fees' => 'setAmountFees',
        'amount_net' => 'setAmountNet',
        'posted_gross' => 'setPostedGross',
        'posted_fees' => 'setPostedFees',
        'posted_net' => 'setPostedNet',
        'adjusted_gross' => 'setAdjustedGross',
        'adjusted_fees' => 'setAdjustedFees',
        'adjusted_net' => 'setAdjustedNet',
        'currency' => 'setCurrency',
        'shop_currency' => 'setShopCurrency',
        'buyer_currency' => 'setBuyerCurrency',
        'shipping_user_id' => 'setShippingUserId',
        'shipping_address_id' => 'setShippingAddressId',
        'billing_address_id' => 'setBillingAddressId',
        'status' => 'setStatus',
        'shipped_timestamp' => 'setShippedTimestamp',
        'create_timestamp' => 'setCreateTimestamp',
        'update_timestamp' => 'setUpdateTimestamp',
        'payment_adjustments' => 'setPaymentAdjustments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_id' => 'getPaymentId',
        'buyer_user_id' => 'getBuyerUserId',
        'shop_id' => 'getShopId',
        'receipt_id' => 'getReceiptId',
        'amount_gross' => 'getAmountGross',
        'amount_fees' => 'getAmountFees',
        'amount_net' => 'getAmountNet',
        'posted_gross' => 'getPostedGross',
        'posted_fees' => 'getPostedFees',
        'posted_net' => 'getPostedNet',
        'adjusted_gross' => 'getAdjustedGross',
        'adjusted_fees' => 'getAdjustedFees',
        'adjusted_net' => 'getAdjustedNet',
        'currency' => 'getCurrency',
        'shop_currency' => 'getShopCurrency',
        'buyer_currency' => 'getBuyerCurrency',
        'shipping_user_id' => 'getShippingUserId',
        'shipping_address_id' => 'getShippingAddressId',
        'billing_address_id' => 'getBillingAddressId',
        'status' => 'getStatus',
        'shipped_timestamp' => 'getShippedTimestamp',
        'create_timestamp' => 'getCreateTimestamp',
        'update_timestamp' => 'getUpdateTimestamp',
        'payment_adjustments' => 'getPaymentAdjustments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_id'] = $data['payment_id'] ?? null;
        $this->container['buyer_user_id'] = $data['buyer_user_id'] ?? null;
        $this->container['shop_id'] = $data['shop_id'] ?? null;
        $this->container['receipt_id'] = $data['receipt_id'] ?? null;
        $this->container['amount_gross'] = $data['amount_gross'] ?? null;
        $this->container['amount_fees'] = $data['amount_fees'] ?? null;
        $this->container['amount_net'] = $data['amount_net'] ?? null;
        $this->container['posted_gross'] = $data['posted_gross'] ?? null;
        $this->container['posted_fees'] = $data['posted_fees'] ?? null;
        $this->container['posted_net'] = $data['posted_net'] ?? null;
        $this->container['adjusted_gross'] = $data['adjusted_gross'] ?? null;
        $this->container['adjusted_fees'] = $data['adjusted_fees'] ?? null;
        $this->container['adjusted_net'] = $data['adjusted_net'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['shop_currency'] = $data['shop_currency'] ?? null;
        $this->container['buyer_currency'] = $data['buyer_currency'] ?? null;
        $this->container['shipping_user_id'] = $data['shipping_user_id'] ?? null;
        $this->container['shipping_address_id'] = $data['shipping_address_id'] ?? null;
        $this->container['billing_address_id'] = $data['billing_address_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['shipped_timestamp'] = $data['shipped_timestamp'] ?? null;
        $this->container['create_timestamp'] = $data['create_timestamp'] ?? null;
        $this->container['update_timestamp'] = $data['update_timestamp'] ?? null;
        $this->container['payment_adjustments'] = $data['payment_adjustments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        if (($this->container['payment_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'payment_id', must be bigger than or equal to 1.";
        }

        if ($this->container['buyer_user_id'] === null) {
            $invalidProperties[] = "'buyer_user_id' can't be null";
        }
        if (($this->container['buyer_user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'buyer_user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['shop_id'] === null) {
            $invalidProperties[] = "'shop_id' can't be null";
        }
        if (($this->container['shop_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shop_id', must be bigger than or equal to 1.";
        }

        if ($this->container['receipt_id'] === null) {
            $invalidProperties[] = "'receipt_id' can't be null";
        }
        if (($this->container['receipt_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'receipt_id', must be bigger than or equal to 1.";
        }

        if ($this->container['amount_gross'] === null) {
            $invalidProperties[] = "'amount_gross' can't be null";
        }
        if ($this->container['amount_fees'] === null) {
            $invalidProperties[] = "'amount_fees' can't be null";
        }
        if ($this->container['amount_net'] === null) {
            $invalidProperties[] = "'amount_net' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['shop_currency'] === null) {
            $invalidProperties[] = "'shop_currency' can't be null";
        }
        if ($this->container['buyer_currency'] === null) {
            $invalidProperties[] = "'buyer_currency' can't be null";
        }
        if ($this->container['shipping_user_id'] === null) {
            $invalidProperties[] = "'shipping_user_id' can't be null";
        }
        if (($this->container['shipping_user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shipping_user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['shipping_address_id'] === null) {
            $invalidProperties[] = "'shipping_address_id' can't be null";
        }
        if (($this->container['shipping_address_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shipping_address_id', must be bigger than or equal to 1.";
        }

        if ($this->container['billing_address_id'] === null) {
            $invalidProperties[] = "'billing_address_id' can't be null";
        }
        if (($this->container['billing_address_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'billing_address_id', must be bigger than or equal to 1.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['shipped_timestamp'] === null) {
            $invalidProperties[] = "'shipped_timestamp' can't be null";
        }
        if (($this->container['shipped_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'shipped_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['create_timestamp'] === null) {
            $invalidProperties[] = "'create_timestamp' can't be null";
        }
        if (($this->container['create_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'create_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['update_timestamp'] === null) {
            $invalidProperties[] = "'update_timestamp' can't be null";
        }
        if (($this->container['update_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'update_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['payment_adjustments'] === null) {
            $invalidProperties[] = "'payment_adjustments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_id
     *
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int $payment_id A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {

        if (($payment_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $payment_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return int
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param int $buyer_user_id The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
     *
     * @return self
     */
    public function setBuyerUserId($buyer_user_id)
    {

        if (($buyer_user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $buyer_user_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id The unique positive non-zero numeric ID for an Etsy Shop.
     *
     * @return self
     */
    public function setShopId($shop_id)
    {

        if (($shop_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shop_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets receipt_id
     *
     * @return int
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param int $receipt_id A unique numeric ID for a [receipt](/documentation/reference#tag/Shop-Receipt) from a specific Etsy [shop](/documentation/reference#tag/Shop).
     *
     * @return self
     */
    public function setReceiptId($receipt_id)
    {

        if (($receipt_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $receipt_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets amount_gross
     *
     * @return Money
     */
    public function getAmountGross()
    {
        return $this->container['amount_gross'];
    }

    /**
     * Sets amount_gross
     *
     * @param Money $amount_gross An integer equal to gross amount of the order, in pennies, including shipping and taxes.
     *
     * @return self
     */
    public function setAmountGross($amount_gross)
    {
        $this->container['amount_gross'] = $amount_gross;

        return $this;
    }

    /**
     * Gets amount_fees
     *
     * @return Money
     */
    public function getAmountFees()
    {
        return $this->container['amount_fees'];
    }

    /**
     * Sets amount_fees
     *
     * @param Money $amount_fees An integer equal to the original card processing fee of the order in pennies.
     *
     * @return self
     */
    public function setAmountFees($amount_fees)
    {
        $this->container['amount_fees'] = $amount_fees;

        return $this;
    }

    /**
     * Gets amount_net
     *
     * @return Money
     */
    public function getAmountNet()
    {
        return $this->container['amount_net'];
    }

    /**
     * Sets amount_net
     *
     * @param Money $amount_net An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).
     *
     * @return self
     */
    public function setAmountNet($amount_net)
    {
        $this->container['amount_net'] = $amount_net;

        return $this;
    }

    /**
     * Gets posted_gross
     *
     * @return Money|null
     */
    public function getPostedGross()
    {
        return $this->container['posted_gross'];
    }

    /**
     * Sets posted_gross
     *
     * @param Money|null $posted_gross The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider \"shipping\" to the event which \"posts\" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the \"Credit\" amount in the ledger entry.
     *
     * @return self
     */
    public function setPostedGross($posted_gross)
    {
        $this->container['posted_gross'] = $posted_gross;

        return $this;
    }

    /**
     * Gets posted_fees
     *
     * @return Money|null
     */
    public function getPostedFees()
    {
        return $this->container['posted_fees'];
    }

    /**
     * Sets posted_fees
     *
     * @param Money|null $posted_fees The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.
     *
     * @return self
     */
    public function setPostedFees($posted_fees)
    {
        $this->container['posted_fees'] = $posted_fees;

        return $this;
    }

    /**
     * Gets posted_net
     *
     * @return Money|null
     */
    public function getPostedNet()
    {
        return $this->container['posted_net'];
    }

    /**
     * Sets posted_net
     *
     * @param Money|null $posted_net The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)
     *
     * @return self
     */
    public function setPostedNet($posted_net)
    {
        $this->container['posted_net'] = $posted_net;

        return $this;
    }

    /**
     * Gets adjusted_gross
     *
     * @return Money|null
     */
    public function getAdjustedGross()
    {
        return $this->container['adjusted_gross'];
    }

    /**
     * Sets adjusted_gross
     *
     * @param Money|null $adjusted_gross The gross payment amount after the seller refunds a payment, partially or fully.
     *
     * @return self
     */
    public function setAdjustedGross($adjusted_gross)
    {
        $this->container['adjusted_gross'] = $adjusted_gross;

        return $this;
    }

    /**
     * Gets adjusted_fees
     *
     * @return Money|null
     */
    public function getAdjustedFees()
    {
        return $this->container['adjusted_fees'];
    }

    /**
     * Sets adjusted_fees
     *
     * @param Money|null $adjusted_fees The new fee amount after a seller refunds a payment, partially or fully.
     *
     * @return self
     */
    public function setAdjustedFees($adjusted_fees)
    {
        $this->container['adjusted_fees'] = $adjusted_fees;

        return $this;
    }

    /**
     * Gets adjusted_net
     *
     * @return Money|null
     */
    public function getAdjustedNet()
    {
        return $this->container['adjusted_net'];
    }

    /**
     * Sets adjusted_net
     *
     * @param Money|null $adjusted_net The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).
     *
     * @return self
     */
    public function setAdjustedNet($adjusted_net)
    {
        $this->container['adjusted_net'] = $adjusted_net;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The ISO (alphabetic) code string for the payment's currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets shop_currency
     *
     * @return string
     */
    public function getShopCurrency()
    {
        return $this->container['shop_currency'];
    }

    /**
     * Sets shop_currency
     *
     * @param string $shop_currency The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
     *
     * @return self
     */
    public function setShopCurrency($shop_currency)
    {
        $this->container['shop_currency'] = $shop_currency;

        return $this;
    }

    /**
     * Gets buyer_currency
     *
     * @return string
     */
    public function getBuyerCurrency()
    {
        return $this->container['buyer_currency'];
    }

    /**
     * Sets buyer_currency
     *
     * @param string $buyer_currency The currency string of the buyer.
     *
     * @return self
     */
    public function setBuyerCurrency($buyer_currency)
    {
        $this->container['buyer_currency'] = $buyer_currency;

        return $this;
    }

    /**
     * Gets shipping_user_id
     *
     * @return int
     */
    public function getShippingUserId()
    {
        return $this->container['shipping_user_id'];
    }

    /**
     * Sets shipping_user_id
     *
     * @param int $shipping_user_id The numeric ID of the user to which the seller ships the order.
     *
     * @return self
     */
    public function setShippingUserId($shipping_user_id)
    {

        if (($shipping_user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shipping_user_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['shipping_user_id'] = $shipping_user_id;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return int
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param int $shipping_address_id The numeric id identifying the shipping address.
     *
     * @return self
     */
    public function setShippingAddressId($shipping_address_id)
    {

        if (($shipping_address_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shipping_address_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets billing_address_id
     *
     * @return int
     */
    public function getBillingAddressId()
    {
        return $this->container['billing_address_id'];
    }

    /**
     * Sets billing_address_id
     *
     * @param int $billing_address_id The numeric ID identifying the billing address of the buyer.
     *
     * @return self
     */
    public function setBillingAddressId($billing_address_id)
    {

        if (($billing_address_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $billing_address_id when calling Payment., must be bigger than or equal to 1.');
        }

        $this->container['billing_address_id'] = $billing_address_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status A string indicating the current status of the payment, most commonly \"settled\" or \"authed\".
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shipped_timestamp
     *
     * @return int
     */
    public function getShippedTimestamp()
    {
        return $this->container['shipped_timestamp'];
    }

    /**
     * Sets shipped_timestamp
     *
     * @param int $shipped_timestamp The date and time the seller shipped the product(s) purchased, in epoch seconds.
     *
     * @return self
     */
    public function setShippedTimestamp($shipped_timestamp)
    {

        if (($shipped_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $shipped_timestamp when calling Payment., must be bigger than or equal to 946684800.');
        }

        $this->container['shipped_timestamp'] = $shipped_timestamp;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The creation date and time the payment adjustment in epoch seconds.
     *
     * @return self
     */
    public function setCreateTimestamp($create_timestamp)
    {

        if (($create_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $create_timestamp when calling Payment., must be bigger than or equal to 946684800.');
        }

        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp The date and time of the last change to the payment adjustment in epoch seconds.
     *
     * @return self
     */
    public function setUpdateTimestamp($update_timestamp)
    {

        if (($update_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $update_timestamp when calling Payment., must be bigger than or equal to 946684800.');
        }

        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }

    /**
     * Gets payment_adjustments
     *
     * @return PaymentAdjustment[]
     */
    public function getPaymentAdjustments()
    {
        return $this->container['payment_adjustments'];
    }

    /**
     * Sets payment_adjustments
     *
     * @param PaymentAdjustment[] $payment_adjustments List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
     *
     * @return self
     */
    public function setPaymentAdjustments($payment_adjustments)
    {
        $this->container['payment_adjustments'] = $payment_adjustments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


