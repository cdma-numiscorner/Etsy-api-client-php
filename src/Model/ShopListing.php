<?php
/**
 * ShopListing
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * ShopListing Class Doc Comment
 *
 * @category Class
 * @description A listing from a shop, which contains a product quantity, title, description, price, etc.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ShopListing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShopListing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listing_id' => 'int',
        'user_id' => 'int',
        'shop_id' => 'int',
        'title' => 'string',
        'description' => 'string',
        'state' => 'string',
        'creation_timestamp' => 'int',
        'ending_timestamp' => 'int',
        'original_creation_timestamp' => 'int',
        'last_modified_timestamp' => 'int',
        'state_timestamp' => 'int',
        'quantity' => 'int',
        'shop_section_id' => 'int',
        'featured_rank' => 'int',
        'url' => 'string',
        'num_favorers' => 'int',
        'non_taxable' => 'bool',
        'is_customizable' => 'bool',
        'listing_type' => 'bool',
        'tags' => 'string[]',
        'materials' => 'string[]',
        'shipping_template_id' => 'int',
        'processing_min' => 'int',
        'processing_max' => 'int',
        'who_made' => 'string',
        'when_made' => 'string',
        'item_weight' => 'float',
        'item_weight_unit' => 'string',
        'item_length' => 'float',
        'item_width' => 'float',
        'item_height' => 'float',
        'item_dimensions_unit' => 'string',
        'is_private' => 'bool',
        'recipient' => 'string',
        'occasion' => 'string',
        'style' => 'string[]',
        'file_data' => 'string',
        'has_variations' => 'bool',
        'should_auto_renew' => 'bool',
        'language' => 'string',
        'price' => 'Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'listing_id' => null,
        'user_id' => null,
        'shop_id' => null,
        'title' => null,
        'description' => null,
        'state' => null,
        'creation_timestamp' => null,
        'ending_timestamp' => null,
        'original_creation_timestamp' => null,
        'last_modified_timestamp' => null,
        'state_timestamp' => null,
        'quantity' => null,
        'shop_section_id' => null,
        'featured_rank' => null,
        'url' => null,
        'num_favorers' => null,
        'non_taxable' => null,
        'is_customizable' => null,
        'listing_type' => null,
        'tags' => null,
        'materials' => null,
        'shipping_template_id' => null,
        'processing_min' => null,
        'processing_max' => null,
        'who_made' => null,
        'when_made' => null,
        'item_weight' => 'float',
        'item_weight_unit' => null,
        'item_length' => 'float',
        'item_width' => 'float',
        'item_height' => 'float',
        'item_dimensions_unit' => null,
        'is_private' => null,
        'recipient' => null,
        'occasion' => null,
        'style' => null,
        'file_data' => null,
        'has_variations' => null,
        'should_auto_renew' => null,
        'language' => null,
        'price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listing_id',
        'user_id' => 'user_id',
        'shop_id' => 'shop_id',
        'title' => 'title',
        'description' => 'description',
        'state' => 'state',
        'creation_timestamp' => 'creation_timestamp',
        'ending_timestamp' => 'ending_timestamp',
        'original_creation_timestamp' => 'original_creation_timestamp',
        'last_modified_timestamp' => 'last_modified_timestamp',
        'state_timestamp' => 'state_timestamp',
        'quantity' => 'quantity',
        'shop_section_id' => 'shop_section_id',
        'featured_rank' => 'featured_rank',
        'url' => 'url',
        'num_favorers' => 'num_favorers',
        'non_taxable' => 'non_taxable',
        'is_customizable' => 'is_customizable',
        'listing_type' => 'listing_type',
        'tags' => 'tags',
        'materials' => 'materials',
        'shipping_template_id' => 'shipping_template_id',
        'processing_min' => 'processing_min',
        'processing_max' => 'processing_max',
        'who_made' => 'who_made',
        'when_made' => 'when_made',
        'item_weight' => 'item_weight',
        'item_weight_unit' => 'item_weight_unit',
        'item_length' => 'item_length',
        'item_width' => 'item_width',
        'item_height' => 'item_height',
        'item_dimensions_unit' => 'item_dimensions_unit',
        'is_private' => 'is_private',
        'recipient' => 'recipient',
        'occasion' => 'occasion',
        'style' => 'style',
        'file_data' => 'file_data',
        'has_variations' => 'has_variations',
        'should_auto_renew' => 'should_auto_renew',
        'language' => 'language',
        'price' => 'price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'user_id' => 'setUserId',
        'shop_id' => 'setShopId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'state' => 'setState',
        'creation_timestamp' => 'setCreationTimestamp',
        'ending_timestamp' => 'setEndingTimestamp',
        'original_creation_timestamp' => 'setOriginalCreationTimestamp',
        'last_modified_timestamp' => 'setLastModifiedTimestamp',
        'state_timestamp' => 'setStateTimestamp',
        'quantity' => 'setQuantity',
        'shop_section_id' => 'setShopSectionId',
        'featured_rank' => 'setFeaturedRank',
        'url' => 'setUrl',
        'num_favorers' => 'setNumFavorers',
        'non_taxable' => 'setNonTaxable',
        'is_customizable' => 'setIsCustomizable',
        'listing_type' => 'setListingType',
        'tags' => 'setTags',
        'materials' => 'setMaterials',
        'shipping_template_id' => 'setShippingTemplateId',
        'processing_min' => 'setProcessingMin',
        'processing_max' => 'setProcessingMax',
        'who_made' => 'setWhoMade',
        'when_made' => 'setWhenMade',
        'item_weight' => 'setItemWeight',
        'item_weight_unit' => 'setItemWeightUnit',
        'item_length' => 'setItemLength',
        'item_width' => 'setItemWidth',
        'item_height' => 'setItemHeight',
        'item_dimensions_unit' => 'setItemDimensionsUnit',
        'is_private' => 'setIsPrivate',
        'recipient' => 'setRecipient',
        'occasion' => 'setOccasion',
        'style' => 'setStyle',
        'file_data' => 'setFileData',
        'has_variations' => 'setHasVariations',
        'should_auto_renew' => 'setShouldAutoRenew',
        'language' => 'setLanguage',
        'price' => 'setPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'user_id' => 'getUserId',
        'shop_id' => 'getShopId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'state' => 'getState',
        'creation_timestamp' => 'getCreationTimestamp',
        'ending_timestamp' => 'getEndingTimestamp',
        'original_creation_timestamp' => 'getOriginalCreationTimestamp',
        'last_modified_timestamp' => 'getLastModifiedTimestamp',
        'state_timestamp' => 'getStateTimestamp',
        'quantity' => 'getQuantity',
        'shop_section_id' => 'getShopSectionId',
        'featured_rank' => 'getFeaturedRank',
        'url' => 'getUrl',
        'num_favorers' => 'getNumFavorers',
        'non_taxable' => 'getNonTaxable',
        'is_customizable' => 'getIsCustomizable',
        'listing_type' => 'getListingType',
        'tags' => 'getTags',
        'materials' => 'getMaterials',
        'shipping_template_id' => 'getShippingTemplateId',
        'processing_min' => 'getProcessingMin',
        'processing_max' => 'getProcessingMax',
        'who_made' => 'getWhoMade',
        'when_made' => 'getWhenMade',
        'item_weight' => 'getItemWeight',
        'item_weight_unit' => 'getItemWeightUnit',
        'item_length' => 'getItemLength',
        'item_width' => 'getItemWidth',
        'item_height' => 'getItemHeight',
        'item_dimensions_unit' => 'getItemDimensionsUnit',
        'is_private' => 'getIsPrivate',
        'recipient' => 'getRecipient',
        'occasion' => 'getOccasion',
        'style' => 'getStyle',
        'file_data' => 'getFileData',
        'has_variations' => 'getHasVariations',
        'should_auto_renew' => 'getShouldAutoRenew',
        'language' => 'getLanguage',
        'price' => 'getPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE__0 = '0';
    const STATE__1 = '1';
    const STATE__2 = '2';
    const STATE__3 = '3';
    const STATE__4 = '4';
    const STATE__5 = '5';
    const WHO_MADE_I_DID = 'i_did';
    const WHO_MADE_SOMEONE_ELSE = 'someone_else';
    const WHO_MADE_COLLECTIVE = 'collective';
    const WHEN_MADE_MADE_TO_ORDER = 'made_to_order';
    const WHEN_MADE__2020_2021 = '2020_2021';
    const WHEN_MADE__2010_2019 = '2010_2019';
    const WHEN_MADE__2002_2009 = '2002_2009';
    const WHEN_MADE_BEFORE_2002 = 'before_2002';
    const WHEN_MADE__2000_2001 = '2000_2001';
    const WHEN_MADE__1990S = '1990s';
    const WHEN_MADE__1980S = '1980s';
    const WHEN_MADE__1970S = '1970s';
    const WHEN_MADE__1960S = '1960s';
    const WHEN_MADE__1950S = '1950s';
    const WHEN_MADE__1940S = '1940s';
    const WHEN_MADE__1930S = '1930s';
    const WHEN_MADE__1920S = '1920s';
    const WHEN_MADE__1910S = '1910s';
    const WHEN_MADE__1900S = '1900s';
    const WHEN_MADE__1800S = '1800s';
    const WHEN_MADE__1700S = '1700s';
    const WHEN_MADE_BEFORE_1700 = 'before_1700';
    const ITEM_WEIGHT_UNIT_OZ = 'oz';
    const ITEM_WEIGHT_UNIT_LB = 'lb';
    const ITEM_WEIGHT_UNIT_G = 'g';
    const ITEM_WEIGHT_UNIT_KG = 'kg';
    const ITEM_DIMENSIONS_UNIT_IN = 'in';
    const ITEM_DIMENSIONS_UNIT_FT = 'ft';
    const ITEM_DIMENSIONS_UNIT_MM = 'mm';
    const ITEM_DIMENSIONS_UNIT_CM = 'cm';
    const ITEM_DIMENSIONS_UNIT_M = 'm';
    const ITEM_DIMENSIONS_UNIT_YD = 'yd';
    const ITEM_DIMENSIONS_UNIT_INCHES = 'inches';
    const RECIPIENT_MEN = 'men';
    const RECIPIENT_WOMEN = 'women';
    const RECIPIENT_UNISEX_ADULTS = 'unisex_adults';
    const RECIPIENT_TEEN_BOYS = 'teen_boys';
    const RECIPIENT_TEEN_GIRLS = 'teen_girls';
    const RECIPIENT_TEENS = 'teens';
    const RECIPIENT_BOYS = 'boys';
    const RECIPIENT_GIRLS = 'girls';
    const RECIPIENT_CHILDREN = 'children';
    const RECIPIENT_BABY_BOYS = 'baby_boys';
    const RECIPIENT_BABY_GIRLS = 'baby_girls';
    const RECIPIENT_BABIES = 'babies';
    const RECIPIENT_BIRDS = 'birds';
    const RECIPIENT_CATS = 'cats';
    const RECIPIENT_DOGS = 'dogs';
    const RECIPIENT_PETS = 'pets';
    const RECIPIENT_NOT_SPECIFIED = 'not_specified';
    const OCCASION_ANNIVERSARY = 'anniversary';
    const OCCASION_BAPTISM = 'baptism';
    const OCCASION_BAR_OR_BAT_MITZVAH = 'bar_or_bat_mitzvah';
    const OCCASION_BIRTHDAY = 'birthday';
    const OCCASION_CANADA_DAY = 'canada_day';
    const OCCASION_CHINESE_NEW_YEAR = 'chinese_new_year';
    const OCCASION_CINCO_DE_MAYO = 'cinco_de_mayo';
    const OCCASION_CONFIRMATION = 'confirmation';
    const OCCASION_CHRISTMAS = 'christmas';
    const OCCASION_DAY_OF_THE_DEAD = 'day_of_the_dead';
    const OCCASION_EASTER = 'easter';
    const OCCASION_EID = 'eid';
    const OCCASION_ENGAGEMENT = 'engagement';
    const OCCASION_FATHERS_DAY = 'fathers_day';
    const OCCASION_GET_WELL = 'get_well';
    const OCCASION_GRADUATION = 'graduation';
    const OCCASION_HALLOWEEN = 'halloween';
    const OCCASION_HANUKKAH = 'hanukkah';
    const OCCASION_HOUSEWARMING = 'housewarming';
    const OCCASION_KWANZAA = 'kwanzaa';
    const OCCASION_PROM = 'prom';
    const OCCASION_JULY_4TH = 'july_4th';
    const OCCASION_MOTHERS_DAY = 'mothers_day';
    const OCCASION_NEW_BABY = 'new_baby';
    const OCCASION_NEW_YEARS = 'new_years';
    const OCCASION_QUINCEANERA = 'quinceanera';
    const OCCASION_RETIREMENT = 'retirement';
    const OCCASION_ST_PATRICKS_DAY = 'st_patricks_day';
    const OCCASION_SWEET_16 = 'sweet_16';
    const OCCASION_SYMPATHY = 'sympathy';
    const OCCASION_THANKSGIVING = 'thanksgiving';
    const OCCASION_VALENTINES = 'valentines';
    const OCCASION_WEDDING = 'wedding';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE__0,
            self::STATE__1,
            self::STATE__2,
            self::STATE__3,
            self::STATE__4,
            self::STATE__5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoMadeAllowableValues()
    {
        return [
            self::WHO_MADE_I_DID,
            self::WHO_MADE_SOMEONE_ELSE,
            self::WHO_MADE_COLLECTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhenMadeAllowableValues()
    {
        return [
            self::WHEN_MADE_MADE_TO_ORDER,
            self::WHEN_MADE__2020_2021,
            self::WHEN_MADE__2010_2019,
            self::WHEN_MADE__2002_2009,
            self::WHEN_MADE_BEFORE_2002,
            self::WHEN_MADE__2000_2001,
            self::WHEN_MADE__1990S,
            self::WHEN_MADE__1980S,
            self::WHEN_MADE__1970S,
            self::WHEN_MADE__1960S,
            self::WHEN_MADE__1950S,
            self::WHEN_MADE__1940S,
            self::WHEN_MADE__1930S,
            self::WHEN_MADE__1920S,
            self::WHEN_MADE__1910S,
            self::WHEN_MADE__1900S,
            self::WHEN_MADE__1800S,
            self::WHEN_MADE__1700S,
            self::WHEN_MADE_BEFORE_1700,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemWeightUnitAllowableValues()
    {
        return [
            self::ITEM_WEIGHT_UNIT_OZ,
            self::ITEM_WEIGHT_UNIT_LB,
            self::ITEM_WEIGHT_UNIT_G,
            self::ITEM_WEIGHT_UNIT_KG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemDimensionsUnitAllowableValues()
    {
        return [
            self::ITEM_DIMENSIONS_UNIT_IN,
            self::ITEM_DIMENSIONS_UNIT_FT,
            self::ITEM_DIMENSIONS_UNIT_MM,
            self::ITEM_DIMENSIONS_UNIT_CM,
            self::ITEM_DIMENSIONS_UNIT_M,
            self::ITEM_DIMENSIONS_UNIT_YD,
            self::ITEM_DIMENSIONS_UNIT_INCHES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecipientAllowableValues()
    {
        return [
            self::RECIPIENT_MEN,
            self::RECIPIENT_WOMEN,
            self::RECIPIENT_UNISEX_ADULTS,
            self::RECIPIENT_TEEN_BOYS,
            self::RECIPIENT_TEEN_GIRLS,
            self::RECIPIENT_TEENS,
            self::RECIPIENT_BOYS,
            self::RECIPIENT_GIRLS,
            self::RECIPIENT_CHILDREN,
            self::RECIPIENT_BABY_BOYS,
            self::RECIPIENT_BABY_GIRLS,
            self::RECIPIENT_BABIES,
            self::RECIPIENT_BIRDS,
            self::RECIPIENT_CATS,
            self::RECIPIENT_DOGS,
            self::RECIPIENT_PETS,
            self::RECIPIENT_NOT_SPECIFIED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOccasionAllowableValues()
    {
        return [
            self::OCCASION_ANNIVERSARY,
            self::OCCASION_BAPTISM,
            self::OCCASION_BAR_OR_BAT_MITZVAH,
            self::OCCASION_BIRTHDAY,
            self::OCCASION_CANADA_DAY,
            self::OCCASION_CHINESE_NEW_YEAR,
            self::OCCASION_CINCO_DE_MAYO,
            self::OCCASION_CONFIRMATION,
            self::OCCASION_CHRISTMAS,
            self::OCCASION_DAY_OF_THE_DEAD,
            self::OCCASION_EASTER,
            self::OCCASION_EID,
            self::OCCASION_ENGAGEMENT,
            self::OCCASION_FATHERS_DAY,
            self::OCCASION_GET_WELL,
            self::OCCASION_GRADUATION,
            self::OCCASION_HALLOWEEN,
            self::OCCASION_HANUKKAH,
            self::OCCASION_HOUSEWARMING,
            self::OCCASION_KWANZAA,
            self::OCCASION_PROM,
            self::OCCASION_JULY_4TH,
            self::OCCASION_MOTHERS_DAY,
            self::OCCASION_NEW_BABY,
            self::OCCASION_NEW_YEARS,
            self::OCCASION_QUINCEANERA,
            self::OCCASION_RETIREMENT,
            self::OCCASION_ST_PATRICKS_DAY,
            self::OCCASION_SWEET_16,
            self::OCCASION_SYMPATHY,
            self::OCCASION_THANKSGIVING,
            self::OCCASION_VALENTINES,
            self::OCCASION_WEDDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['shop_id'] = $data['shop_id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['creation_timestamp'] = $data['creation_timestamp'] ?? null;
        $this->container['ending_timestamp'] = $data['ending_timestamp'] ?? null;
        $this->container['original_creation_timestamp'] = $data['original_creation_timestamp'] ?? null;
        $this->container['last_modified_timestamp'] = $data['last_modified_timestamp'] ?? null;
        $this->container['state_timestamp'] = $data['state_timestamp'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['shop_section_id'] = $data['shop_section_id'] ?? null;
        $this->container['featured_rank'] = $data['featured_rank'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['num_favorers'] = $data['num_favorers'] ?? null;
        $this->container['non_taxable'] = $data['non_taxable'] ?? null;
        $this->container['is_customizable'] = $data['is_customizable'] ?? null;
        $this->container['listing_type'] = $data['listing_type'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['materials'] = $data['materials'] ?? null;
        $this->container['shipping_template_id'] = $data['shipping_template_id'] ?? null;
        $this->container['processing_min'] = $data['processing_min'] ?? null;
        $this->container['processing_max'] = $data['processing_max'] ?? null;
        $this->container['who_made'] = $data['who_made'] ?? null;
        $this->container['when_made'] = $data['when_made'] ?? null;
        $this->container['item_weight'] = $data['item_weight'] ?? null;
        $this->container['item_weight_unit'] = $data['item_weight_unit'] ?? null;
        $this->container['item_length'] = $data['item_length'] ?? null;
        $this->container['item_width'] = $data['item_width'] ?? null;
        $this->container['item_height'] = $data['item_height'] ?? null;
        $this->container['item_dimensions_unit'] = $data['item_dimensions_unit'] ?? null;
        $this->container['is_private'] = $data['is_private'] ?? null;
        $this->container['recipient'] = $data['recipient'] ?? null;
        $this->container['occasion'] = $data['occasion'] ?? null;
        $this->container['style'] = $data['style'] ?? null;
        $this->container['file_data'] = $data['file_data'] ?? null;
        $this->container['has_variations'] = $data['has_variations'] ?? null;
        $this->container['should_auto_renew'] = $data['should_auto_renew'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_id'] === null) {
            $invalidProperties[] = "'listing_id' can't be null";
        }
        if (($this->container['listing_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'listing_id', must be bigger than or equal to 1.";
        }

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if (($this->container['user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['shop_id'] === null) {
            $invalidProperties[] = "'shop_id' can't be null";
        }
        if (($this->container['shop_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shop_id', must be bigger than or equal to 1.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['creation_timestamp'] === null) {
            $invalidProperties[] = "'creation_timestamp' can't be null";
        }
        if (($this->container['creation_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'creation_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['ending_timestamp'] === null) {
            $invalidProperties[] = "'ending_timestamp' can't be null";
        }
        if (($this->container['ending_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'ending_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['original_creation_timestamp'] === null) {
            $invalidProperties[] = "'original_creation_timestamp' can't be null";
        }
        if (($this->container['original_creation_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'original_creation_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['last_modified_timestamp'] === null) {
            $invalidProperties[] = "'last_modified_timestamp' can't be null";
        }
        if (($this->container['last_modified_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'last_modified_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['state_timestamp'] === null) {
            $invalidProperties[] = "'state_timestamp' can't be null";
        }
        if (($this->container['state_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'state_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if ($this->container['shop_section_id'] === null) {
            $invalidProperties[] = "'shop_section_id' can't be null";
        }
        if (($this->container['shop_section_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shop_section_id', must be bigger than or equal to 1.";
        }

        if ($this->container['featured_rank'] === null) {
            $invalidProperties[] = "'featured_rank' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['num_favorers'] === null) {
            $invalidProperties[] = "'num_favorers' can't be null";
        }
        if (($this->container['num_favorers'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_favorers', must be bigger than or equal to 0.";
        }

        if ($this->container['non_taxable'] === null) {
            $invalidProperties[] = "'non_taxable' can't be null";
        }
        if ($this->container['is_customizable'] === null) {
            $invalidProperties[] = "'is_customizable' can't be null";
        }
        if ($this->container['listing_type'] === null) {
            $invalidProperties[] = "'listing_type' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['materials'] === null) {
            $invalidProperties[] = "'materials' can't be null";
        }
        if ($this->container['shipping_template_id'] === null) {
            $invalidProperties[] = "'shipping_template_id' can't be null";
        }
        if (($this->container['shipping_template_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'shipping_template_id', must be bigger than or equal to 1.";
        }

        if ($this->container['processing_min'] === null) {
            $invalidProperties[] = "'processing_min' can't be null";
        }
        if (($this->container['processing_min'] < 0)) {
            $invalidProperties[] = "invalid value for 'processing_min', must be bigger than or equal to 0.";
        }

        if ($this->container['processing_max'] === null) {
            $invalidProperties[] = "'processing_max' can't be null";
        }
        if (($this->container['processing_max'] < 0)) {
            $invalidProperties[] = "invalid value for 'processing_max', must be bigger than or equal to 0.";
        }

        if ($this->container['who_made'] === null) {
            $invalidProperties[] = "'who_made' can't be null";
        }
        $allowedValues = $this->getWhoMadeAllowableValues();
        if (!is_null($this->container['who_made']) && !in_array($this->container['who_made'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'who_made', must be one of '%s'",
                $this->container['who_made'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['when_made'] === null) {
            $invalidProperties[] = "'when_made' can't be null";
        }
        $allowedValues = $this->getWhenMadeAllowableValues();
        if (!is_null($this->container['when_made']) && !in_array($this->container['when_made'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'when_made', must be one of '%s'",
                $this->container['when_made'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['item_weight'] === null) {
            $invalidProperties[] = "'item_weight' can't be null";
        }
        if ($this->container['item_weight_unit'] === null) {
            $invalidProperties[] = "'item_weight_unit' can't be null";
        }
        $allowedValues = $this->getItemWeightUnitAllowableValues();
        if (!is_null($this->container['item_weight_unit']) && !in_array($this->container['item_weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_weight_unit', must be one of '%s'",
                $this->container['item_weight_unit'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['item_length'] === null) {
            $invalidProperties[] = "'item_length' can't be null";
        }
        if ($this->container['item_width'] === null) {
            $invalidProperties[] = "'item_width' can't be null";
        }
        if ($this->container['item_height'] === null) {
            $invalidProperties[] = "'item_height' can't be null";
        }
        if ($this->container['item_dimensions_unit'] === null) {
            $invalidProperties[] = "'item_dimensions_unit' can't be null";
        }
        $allowedValues = $this->getItemDimensionsUnitAllowableValues();
        if (!is_null($this->container['item_dimensions_unit']) && !in_array($this->container['item_dimensions_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_dimensions_unit', must be one of '%s'",
                $this->container['item_dimensions_unit'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_private'] === null) {
            $invalidProperties[] = "'is_private' can't be null";
        }
        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        $allowedValues = $this->getRecipientAllowableValues();
        if (!is_null($this->container['recipient']) && !in_array($this->container['recipient'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recipient', must be one of '%s'",
                $this->container['recipient'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['occasion'] === null) {
            $invalidProperties[] = "'occasion' can't be null";
        }
        $allowedValues = $this->getOccasionAllowableValues();
        if (!is_null($this->container['occasion']) && !in_array($this->container['occasion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'occasion', must be one of '%s'",
                $this->container['occasion'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['style'] === null) {
            $invalidProperties[] = "'style' can't be null";
        }
        if ($this->container['file_data'] === null) {
            $invalidProperties[] = "'file_data' can't be null";
        }
        if ($this->container['has_variations'] === null) {
            $invalidProperties[] = "'has_variations' can't be null";
        }
        if ($this->container['should_auto_renew'] === null) {
            $invalidProperties[] = "'should_auto_renew' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id The unique numeric ID for a listing in a specific [shop](/documentation/reference#tag/Shop).
     *
     * @return self
     */
    public function setListingId($listing_id)
    {

        if (($listing_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $listing_id when calling ShopListing., must be bigger than or equal to 1.');
        }

        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (($user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $user_id when calling ShopListing., must be bigger than or equal to 1.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id The unique positive non-zero numeric ID for an Etsy Shop.
     *
     * @return self
     */
    public function setShopId($shop_id)
    {

        if (($shop_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shop_id when calling ShopListing., must be bigger than or equal to 1.');
        }

        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The listing's title string. Valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{P}\\\\p{Sm}\\\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description string of the product for sale in the listing.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state An enumerated string from any of: active, removed, sold_out, expired, alchemy, edit, create, private, or unavailable.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets creation_timestamp
     *
     * @return int
     */
    public function getCreationTimestamp()
    {
        return $this->container['creation_timestamp'];
    }

    /**
     * Sets creation_timestamp
     *
     * @param int $creation_timestamp The listing\\'s creation time, in epoch seconds.
     *
     * @return self
     */
    public function setCreationTimestamp($creation_timestamp)
    {

        if (($creation_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $creation_timestamp when calling ShopListing., must be bigger than or equal to 946684800.');
        }

        $this->container['creation_timestamp'] = $creation_timestamp;

        return $this;
    }

    /**
     * Gets ending_timestamp
     *
     * @return int
     */
    public function getEndingTimestamp()
    {
        return $this->container['ending_timestamp'];
    }

    /**
     * Sets ending_timestamp
     *
     * @param int $ending_timestamp The listing\\'s expiration time, in epoch seconds.
     *
     * @return self
     */
    public function setEndingTimestamp($ending_timestamp)
    {

        if (($ending_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $ending_timestamp when calling ShopListing., must be bigger than or equal to 946684800.');
        }

        $this->container['ending_timestamp'] = $ending_timestamp;

        return $this;
    }

    /**
     * Gets original_creation_timestamp
     *
     * @return int
     */
    public function getOriginalCreationTimestamp()
    {
        return $this->container['original_creation_timestamp'];
    }

    /**
     * Sets original_creation_timestamp
     *
     * @param int $original_creation_timestamp The listing\\'s creation time, in epoch seconds.
     *
     * @return self
     */
    public function setOriginalCreationTimestamp($original_creation_timestamp)
    {

        if (($original_creation_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $original_creation_timestamp when calling ShopListing., must be bigger than or equal to 946684800.');
        }

        $this->container['original_creation_timestamp'] = $original_creation_timestamp;

        return $this;
    }

    /**
     * Gets last_modified_timestamp
     *
     * @return int
     */
    public function getLastModifiedTimestamp()
    {
        return $this->container['last_modified_timestamp'];
    }

    /**
     * Sets last_modified_timestamp
     *
     * @param int $last_modified_timestamp The time of the last update to the listing, in epoch seconds.
     *
     * @return self
     */
    public function setLastModifiedTimestamp($last_modified_timestamp)
    {

        if (($last_modified_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $last_modified_timestamp when calling ShopListing., must be bigger than or equal to 946684800.');
        }

        $this->container['last_modified_timestamp'] = $last_modified_timestamp;

        return $this;
    }

    /**
     * Gets state_timestamp
     *
     * @return int
     */
    public function getStateTimestamp()
    {
        return $this->container['state_timestamp'];
    }

    /**
     * Sets state_timestamp
     *
     * @param int $state_timestamp The date and time of the last state change of this listing.
     *
     * @return self
     */
    public function setStateTimestamp($state_timestamp)
    {

        if (($state_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $state_timestamp when calling ShopListing., must be bigger than or equal to 946684800.');
        }

        $this->container['state_timestamp'] = $state_timestamp;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if (($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ShopListing., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets shop_section_id
     *
     * @return int
     */
    public function getShopSectionId()
    {
        return $this->container['shop_section_id'];
    }

    /**
     * Sets shop_section_id
     *
     * @param int $shop_section_id The numeric ID of a section in a specific Etsy shop.
     *
     * @return self
     */
    public function setShopSectionId($shop_section_id)
    {

        if (($shop_section_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shop_section_id when calling ShopListing., must be bigger than or equal to 1.');
        }

        $this->container['shop_section_id'] = $shop_section_id;

        return $this;
    }

    /**
     * Gets featured_rank
     *
     * @return int
     */
    public function getFeaturedRank()
    {
        return $this->container['featured_rank'];
    }

    /**
     * Sets featured_rank
     *
     * @param int $featured_rank The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
     *
     * @return self
     */
    public function setFeaturedRank($featured_rank)
    {
        $this->container['featured_rank'] = $featured_rank;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The full URL to the listing's page on Etsy.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets num_favorers
     *
     * @return int
     */
    public function getNumFavorers()
    {
        return $this->container['num_favorers'];
    }

    /**
     * Sets num_favorers
     *
     * @param int $num_favorers The number of users who marked this Listing a favorite.
     *
     * @return self
     */
    public function setNumFavorers($num_favorers)
    {

        if (($num_favorers < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_favorers when calling ShopListing., must be bigger than or equal to 0.');
        }

        $this->container['num_favorers'] = $num_favorers;

        return $this;
    }

    /**
     * Gets non_taxable
     *
     * @return bool
     */
    public function getNonTaxable()
    {
        return $this->container['non_taxable'];
    }

    /**
     * Sets non_taxable
     *
     * @param bool $non_taxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
     *
     * @return self
     */
    public function setNonTaxable($non_taxable)
    {
        $this->container['non_taxable'] = $non_taxable;

        return $this;
    }

    /**
     * Gets is_customizable
     *
     * @return bool
     */
    public function getIsCustomizable()
    {
        return $this->container['is_customizable'];
    }

    /**
     * Sets is_customizable
     *
     * @param bool $is_customizable When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
     *
     * @return self
     */
    public function setIsCustomizable($is_customizable)
    {
        $this->container['is_customizable'] = $is_customizable;

        return $this;
    }

    /**
     * Gets listing_type
     *
     * @return bool
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param bool $listing_type An enumerated type string that indicates whether the listing is physical or a digital download.
     *
     * @return self
     */
    public function setListingType($listing_type)
    {
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags A list of tag strings for the listing. Valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}\\\\-'™©®]/u) Default value is null.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return string[]
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param string[] $materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
     *
     * @return self
     */
    public function setMaterials($materials)
    {
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets shipping_template_id
     *
     * @return int
     */
    public function getShippingTemplateId()
    {
        return $this->container['shipping_template_id'];
    }

    /**
     * Sets shipping_template_id
     *
     * @param int $shipping_template_id The numeric ID of the shipping template associated with the listing.
     *
     * @return self
     */
    public function setShippingTemplateId($shipping_template_id)
    {

        if (($shipping_template_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $shipping_template_id when calling ShopListing., must be bigger than or equal to 1.');
        }

        $this->container['shipping_template_id'] = $shipping_template_id;

        return $this;
    }

    /**
     * Gets processing_min
     *
     * @return int
     */
    public function getProcessingMin()
    {
        return $this->container['processing_min'];
    }

    /**
     * Sets processing_min
     *
     * @param int $processing_min The minimum number of days required to process this listing. Default value is null.
     *
     * @return self
     */
    public function setProcessingMin($processing_min)
    {

        if (($processing_min < 0)) {
            throw new \InvalidArgumentException('invalid value for $processing_min when calling ShopListing., must be bigger than or equal to 0.');
        }

        $this->container['processing_min'] = $processing_min;

        return $this;
    }

    /**
     * Gets processing_max
     *
     * @return int
     */
    public function getProcessingMax()
    {
        return $this->container['processing_max'];
    }

    /**
     * Sets processing_max
     *
     * @param int $processing_max The maximum number of days required to process this listing. Default value is null.
     *
     * @return self
     */
    public function setProcessingMax($processing_max)
    {

        if (($processing_max < 0)) {
            throw new \InvalidArgumentException('invalid value for $processing_max when calling ShopListing., must be bigger than or equal to 0.');
        }

        $this->container['processing_max'] = $processing_max;

        return $this;
    }

    /**
     * Gets who_made
     *
     * @return string
     */
    public function getWhoMade()
    {
        return $this->container['who_made'];
    }

    /**
     * Sets who_made
     *
     * @param string $who_made An enumerated string inidcated who made the product. Helps buyers locate the listing under the Handmade heading.
     *
     * @return self
     */
    public function setWhoMade($who_made)
    {
        $allowedValues = $this->getWhoMadeAllowableValues();
        if (!in_array($who_made, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'who_made', must be one of '%s'",
                    $who_made,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_made'] = $who_made;

        return $this;
    }

    /**
     * Gets when_made
     *
     * @return string
     */
    public function getWhenMade()
    {
        return $this->container['when_made'];
    }

    /**
     * Sets when_made
     *
     * @param string $when_made An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading.
     *
     * @return self
     */
    public function setWhenMade($when_made)
    {
        $allowedValues = $this->getWhenMadeAllowableValues();
        if (!in_array($when_made, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'when_made', must be one of '%s'",
                    $when_made,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['when_made'] = $when_made;

        return $this;
    }

    /**
     * Gets item_weight
     *
     * @return float
     */
    public function getItemWeight()
    {
        return $this->container['item_weight'];
    }

    /**
     * Sets item_weight
     *
     * @param float $item_weight The numeric weight of the product measured in units set in \\'item_weight_unit\\'. Default value is null.
     *
     * @return self
     */
    public function setItemWeight($item_weight)
    {
        $this->container['item_weight'] = $item_weight;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string $item_weight_unit A string defining the units used to measure the weight of the product. Default value is null.
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        $allowedValues = $this->getItemWeightUnitAllowableValues();
        if (!in_array($item_weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_weight_unit', must be one of '%s'",
                    $item_weight_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets item_length
     *
     * @return float
     */
    public function getItemLength()
    {
        return $this->container['item_length'];
    }

    /**
     * Sets item_length
     *
     * @param float $item_length The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null.
     *
     * @return self
     */
    public function setItemLength($item_length)
    {
        $this->container['item_length'] = $item_length;

        return $this;
    }

    /**
     * Gets item_width
     *
     * @return float
     */
    public function getItemWidth()
    {
        return $this->container['item_width'];
    }

    /**
     * Sets item_width
     *
     * @param float $item_width The numeric width of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null.
     *
     * @return self
     */
    public function setItemWidth($item_width)
    {
        $this->container['item_width'] = $item_width;

        return $this;
    }

    /**
     * Gets item_height
     *
     * @return float
     */
    public function getItemHeight()
    {
        return $this->container['item_height'];
    }

    /**
     * Sets item_height
     *
     * @param float $item_height The numeric length of the product measured in units set in \\'item_dimensions_unit\\'. Default value is null.
     *
     * @return self
     */
    public function setItemHeight($item_height)
    {
        $this->container['item_height'] = $item_height;

        return $this;
    }

    /**
     * Gets item_dimensions_unit
     *
     * @return string
     */
    public function getItemDimensionsUnit()
    {
        return $this->container['item_dimensions_unit'];
    }

    /**
     * Sets item_dimensions_unit
     *
     * @param string $item_dimensions_unit A string defining the units used to measure the dimensions of the product. Default value is null.
     *
     * @return self
     */
    public function setItemDimensionsUnit($item_dimensions_unit)
    {
        $allowedValues = $this->getItemDimensionsUnitAllowableValues();
        if (!in_array($item_dimensions_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_dimensions_unit', must be one of '%s'",
                    $item_dimensions_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_dimensions_unit'] = $item_dimensions_unit;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private When true, this is a private listing intendend for a specific buyer and hidden from shop view.
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient An enumerated string indicating a person for whom this product would make an appropriate gift. Default value is null.
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        $allowedValues = $this->getRecipientAllowableValues();
        if (!in_array($recipient, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recipient', must be one of '%s'",
                    $recipient,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets occasion
     *
     * @return string
     */
    public function getOccasion()
    {
        return $this->container['occasion'];
    }

    /**
     * Sets occasion
     *
     * @param string $occasion An enumerated string indicating an occassion for which this product would make an appropriate gift. Default value is null.
     *
     * @return self
     */
    public function setOccasion($occasion)
    {
        $allowedValues = $this->getOccasionAllowableValues();
        if (!in_array($occasion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'occasion', must be one of '%s'",
                    $occasion,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['occasion'] = $occasion;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string[]
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string[] $style An array of style strings for this listing, each of which is free-form text string such as \\\"Formal\\\", or \\\"Steampunk\\\". A Listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\\\p{L}\\\\p{Nd}\\\\p{Zs}]/u) Default value is null.
     *
     * @return self
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets file_data
     *
     * @return string
     */
    public function getFileData()
    {
        return $this->container['file_data'];
    }

    /**
     * Sets file_data
     *
     * @param string $file_data A string describing the files attached to a digital listing.
     *
     * @return self
     */
    public function setFileData($file_data)
    {
        $this->container['file_data'] = $file_data;

        return $this;
    }

    /**
     * Gets has_variations
     *
     * @return bool
     */
    public function getHasVariations()
    {
        return $this->container['has_variations'];
    }

    /**
     * Sets has_variations
     *
     * @param bool $has_variations When true, the listing has variations.
     *
     * @return self
     */
    public function setHasVariations($has_variations)
    {
        $this->container['has_variations'] = $has_variations;

        return $this;
    }

    /**
     * Gets should_auto_renew
     *
     * @return bool
     */
    public function getShouldAutoRenew()
    {
        return $this->container['should_auto_renew'];
    }

    /**
     * Sets should_auto_renew
     *
     * @param bool $should_auto_renew When true, renews a listing for four months upon expriation. If set to true when previously false, etsy.com renews the listing before it expires, but the renewal period starts immidiately rather than extending the listing's expiration date. Any unused time remaining on the listing is lost. Renewals result in charges to a user's bill.
     *
     * @return self
     */
    public function setShouldAutoRenew($should_auto_renew)
    {
        $this->container['should_auto_renew'] = $should_auto_renew;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets price
     *
     * @return Money
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param Money $price The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The getInventory method requests exact prices for available offerings.
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


