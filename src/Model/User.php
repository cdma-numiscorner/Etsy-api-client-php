<?php
/**
 * User
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description Represents a single user of the site
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'login_name' => 'string',
        'primary_email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'create_timestamp' => 'int',
        'referred_by_user_id' => 'int',
        'use_new_inventory_endpoints' => 'bool',
        'is_seller' => 'bool',
        'bio' => 'string',
        'gender' => 'string',
        'birth_month' => 'string',
        'birth_day' => 'string',
        'transaction_buy_count' => 'int',
        'transaction_sold_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => null,
        'login_name' => null,
        'primary_email' => 'email',
        'first_name' => null,
        'last_name' => null,
        'create_timestamp' => null,
        'referred_by_user_id' => null,
        'use_new_inventory_endpoints' => null,
        'is_seller' => null,
        'bio' => null,
        'gender' => null,
        'birth_month' => null,
        'birth_day' => null,
        'transaction_buy_count' => null,
        'transaction_sold_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'login_name' => 'login_name',
        'primary_email' => 'primary_email',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'create_timestamp' => 'create_timestamp',
        'referred_by_user_id' => 'referred_by_user_id',
        'use_new_inventory_endpoints' => 'use_new_inventory_endpoints',
        'is_seller' => 'is_seller',
        'bio' => 'bio',
        'gender' => 'gender',
        'birth_month' => 'birth_month',
        'birth_day' => 'birth_day',
        'transaction_buy_count' => 'transaction_buy_count',
        'transaction_sold_count' => 'transaction_sold_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'login_name' => 'setLoginName',
        'primary_email' => 'setPrimaryEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'create_timestamp' => 'setCreateTimestamp',
        'referred_by_user_id' => 'setReferredByUserId',
        'use_new_inventory_endpoints' => 'setUseNewInventoryEndpoints',
        'is_seller' => 'setIsSeller',
        'bio' => 'setBio',
        'gender' => 'setGender',
        'birth_month' => 'setBirthMonth',
        'birth_day' => 'setBirthDay',
        'transaction_buy_count' => 'setTransactionBuyCount',
        'transaction_sold_count' => 'setTransactionSoldCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'login_name' => 'getLoginName',
        'primary_email' => 'getPrimaryEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'create_timestamp' => 'getCreateTimestamp',
        'referred_by_user_id' => 'getReferredByUserId',
        'use_new_inventory_endpoints' => 'getUseNewInventoryEndpoints',
        'is_seller' => 'getIsSeller',
        'bio' => 'getBio',
        'gender' => 'getGender',
        'birth_month' => 'getBirthMonth',
        'birth_day' => 'getBirthDay',
        'transaction_buy_count' => 'getTransactionBuyCount',
        'transaction_sold_count' => 'getTransactionSoldCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['login_name'] = $data['login_name'] ?? null;
        $this->container['primary_email'] = $data['primary_email'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['create_timestamp'] = $data['create_timestamp'] ?? null;
        $this->container['referred_by_user_id'] = $data['referred_by_user_id'] ?? null;
        $this->container['use_new_inventory_endpoints'] = $data['use_new_inventory_endpoints'] ?? null;
        $this->container['is_seller'] = $data['is_seller'] ?? null;
        $this->container['bio'] = $data['bio'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['birth_month'] = $data['birth_month'] ?? null;
        $this->container['birth_day'] = $data['birth_day'] ?? null;
        $this->container['transaction_buy_count'] = $data['transaction_buy_count'] ?? null;
        $this->container['transaction_sold_count'] = $data['transaction_sold_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if (($this->container['user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['login_name'] === null) {
            $invalidProperties[] = "'login_name' can't be null";
        }
        if ($this->container['primary_email'] === null) {
            $invalidProperties[] = "'primary_email' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['create_timestamp'] === null) {
            $invalidProperties[] = "'create_timestamp' can't be null";
        }
        if (($this->container['create_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'create_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['referred_by_user_id'] === null) {
            $invalidProperties[] = "'referred_by_user_id' can't be null";
        }
        if (($this->container['referred_by_user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'referred_by_user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['use_new_inventory_endpoints'] === null) {
            $invalidProperties[] = "'use_new_inventory_endpoints' can't be null";
        }
        if ($this->container['is_seller'] === null) {
            $invalidProperties[] = "'is_seller' can't be null";
        }
        if ($this->container['bio'] === null) {
            $invalidProperties[] = "'bio' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['birth_month'] === null) {
            $invalidProperties[] = "'birth_month' can't be null";
        }
        if ($this->container['birth_day'] === null) {
            $invalidProperties[] = "'birth_day' can't be null";
        }
        if ($this->container['transaction_buy_count'] === null) {
            $invalidProperties[] = "'transaction_buy_count' can't be null";
        }
        if (($this->container['transaction_buy_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_buy_count', must be bigger than or equal to 0.";
        }

        if ($this->container['transaction_sold_count'] === null) {
            $invalidProperties[] = "'transaction_sold_count' can't be null";
        }
        if (($this->container['transaction_sold_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_sold_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The numeric ID of a user. This number is also a valid shop ID for the user\\'s shop.
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (($user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $user_id when calling User., must be bigger than or equal to 1.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets login_name
     *
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['login_name'];
    }

    /**
     * Sets login_name
     *
     * @param string $login_name The user\\'s login name string.
     *
     * @return self
     */
    public function setLoginName($login_name)
    {
        $this->container['login_name'] = $login_name;

        return $this;
    }

    /**
     * Gets primary_email
     *
     * @return string
     */
    public function getPrimaryEmail()
    {
        return $this->container['primary_email'];
    }

    /**
     * Sets primary_email
     *
     * @param string $primary_email An email address string for the user\\'s primary email address.
     *
     * @return self
     */
    public function setPrimaryEmail($primary_email)
    {
        $this->container['primary_email'] = $primary_email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The user\\'s first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The user\\'s last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The date and time the user created their account, in epoch seconds.
     *
     * @return self
     */
    public function setCreateTimestamp($create_timestamp)
    {

        if (($create_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $create_timestamp when calling User., must be bigger than or equal to 946684800.');
        }

        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets referred_by_user_id
     *
     * @return int
     */
    public function getReferredByUserId()
    {
        return $this->container['referred_by_user_id'];
    }

    /**
     * Sets referred_by_user_id
     *
     * @param int $referred_by_user_id The numeric ID of the user who referred this user.
     *
     * @return self
     */
    public function setReferredByUserId($referred_by_user_id)
    {

        if (($referred_by_user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $referred_by_user_id when calling User., must be bigger than or equal to 1.');
        }

        $this->container['referred_by_user_id'] = $referred_by_user_id;

        return $this;
    }

    /**
     * Gets use_new_inventory_endpoints
     *
     * @return bool
     */
    public function getUseNewInventoryEndpoints()
    {
        return $this->container['use_new_inventory_endpoints'];
    }

    /**
     * Sets use_new_inventory_endpoints
     *
     * @param bool $use_new_inventory_endpoints Deprecated. Always true.
     *
     * @return self
     */
    public function setUseNewInventoryEndpoints($use_new_inventory_endpoints)
    {
        $this->container['use_new_inventory_endpoints'] = $use_new_inventory_endpoints;

        return $this;
    }

    /**
     * Gets is_seller
     *
     * @return bool
     */
    public function getIsSeller()
    {
        return $this->container['is_seller'];
    }

    /**
     * Sets is_seller
     *
     * @param bool $is_seller True if the user is seller.
     *
     * @return self
     */
    public function setIsSeller($is_seller)
    {
        $this->container['is_seller'] = $is_seller;

        return $this;
    }

    /**
     * Gets bio
     *
     * @return string
     */
    public function getBio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     *
     * @param string $bio The user\\'s biography.
     *
     * @return self
     */
    public function setBio($bio)
    {
        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The user\\'s gender.
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_month
     *
     * @return string
     */
    public function getBirthMonth()
    {
        return $this->container['birth_month'];
    }

    /**
     * Sets birth_month
     *
     * @param string $birth_month The user\\'s month of birth.
     *
     * @return self
     */
    public function setBirthMonth($birth_month)
    {
        $this->container['birth_month'] = $birth_month;

        return $this;
    }

    /**
     * Gets birth_day
     *
     * @return string
     */
    public function getBirthDay()
    {
        return $this->container['birth_day'];
    }

    /**
     * Sets birth_day
     *
     * @param string $birth_day The user\\'s day of birth.
     *
     * @return self
     */
    public function setBirthDay($birth_day)
    {
        $this->container['birth_day'] = $birth_day;

        return $this;
    }

    /**
     * Gets transaction_buy_count
     *
     * @return int
     */
    public function getTransactionBuyCount()
    {
        return $this->container['transaction_buy_count'];
    }

    /**
     * Sets transaction_buy_count
     *
     * @param int $transaction_buy_count The number of transactions where the user has bought.
     *
     * @return self
     */
    public function setTransactionBuyCount($transaction_buy_count)
    {

        if (($transaction_buy_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $transaction_buy_count when calling User., must be bigger than or equal to 0.');
        }

        $this->container['transaction_buy_count'] = $transaction_buy_count;

        return $this;
    }

    /**
     * Gets transaction_sold_count
     *
     * @return int
     */
    public function getTransactionSoldCount()
    {
        return $this->container['transaction_sold_count'];
    }

    /**
     * Sets transaction_sold_count
     *
     * @param int $transaction_sold_count The number of transactions where the user has sold.
     *
     * @return self
     */
    public function setTransactionSoldCount($transaction_sold_count)
    {

        if (($transaction_sold_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $transaction_sold_count when calling User., must be bigger than or equal to 0.');
        }

        $this->container['transaction_sold_count'] = $transaction_sold_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


