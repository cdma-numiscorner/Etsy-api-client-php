<?php
/**
 * ListingImage
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * ListingImage Class Doc Comment
 *
 * @category Class
 * @description Reference urls and metadata for an image associated with a specific listing. The &#x60;url_fullxfull&#x60; parameter contains the URL for full-sized binary image file.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ListingImage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListingImage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listing_id' => 'int',
        'listing_image_id' => 'int',
        'hex_code' => 'string',
        'red' => 'int',
        'green' => 'int',
        'blue' => 'int',
        'hue' => 'int',
        'saturation' => 'int',
        'brightness' => 'int',
        'is_black_and_white' => 'bool',
        'creation_tsz' => 'int',
        'rank' => 'int',
        'url_75x75' => 'string',
        'url_170x135' => 'string',
        'url_570x_n' => 'string',
        'url_fullxfull' => 'string',
        'full_height' => 'int',
        'full_width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'listing_id' => null,
        'listing_image_id' => null,
        'hex_code' => null,
        'red' => null,
        'green' => null,
        'blue' => null,
        'hue' => null,
        'saturation' => null,
        'brightness' => null,
        'is_black_and_white' => null,
        'creation_tsz' => null,
        'rank' => null,
        'url_75x75' => null,
        'url_170x135' => null,
        'url_570x_n' => null,
        'url_fullxfull' => null,
        'full_height' => null,
        'full_width' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listing_id',
        'listing_image_id' => 'listing_image_id',
        'hex_code' => 'hex_code',
        'red' => 'red',
        'green' => 'green',
        'blue' => 'blue',
        'hue' => 'hue',
        'saturation' => 'saturation',
        'brightness' => 'brightness',
        'is_black_and_white' => 'is_black_and_white',
        'creation_tsz' => 'creation_tsz',
        'rank' => 'rank',
        'url_75x75' => 'url_75x75',
        'url_170x135' => 'url_170x135',
        'url_570x_n' => 'url_570xN',
        'url_fullxfull' => 'url_fullxfull',
        'full_height' => 'full_height',
        'full_width' => 'full_width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'listing_image_id' => 'setListingImageId',
        'hex_code' => 'setHexCode',
        'red' => 'setRed',
        'green' => 'setGreen',
        'blue' => 'setBlue',
        'hue' => 'setHue',
        'saturation' => 'setSaturation',
        'brightness' => 'setBrightness',
        'is_black_and_white' => 'setIsBlackAndWhite',
        'creation_tsz' => 'setCreationTsz',
        'rank' => 'setRank',
        'url_75x75' => 'setUrl75x75',
        'url_170x135' => 'setUrl170x135',
        'url_570x_n' => 'setUrl570xN',
        'url_fullxfull' => 'setUrlFullxfull',
        'full_height' => 'setFullHeight',
        'full_width' => 'setFullWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'listing_image_id' => 'getListingImageId',
        'hex_code' => 'getHexCode',
        'red' => 'getRed',
        'green' => 'getGreen',
        'blue' => 'getBlue',
        'hue' => 'getHue',
        'saturation' => 'getSaturation',
        'brightness' => 'getBrightness',
        'is_black_and_white' => 'getIsBlackAndWhite',
        'creation_tsz' => 'getCreationTsz',
        'rank' => 'getRank',
        'url_75x75' => 'getUrl75x75',
        'url_170x135' => 'getUrl170x135',
        'url_570x_n' => 'getUrl570xN',
        'url_fullxfull' => 'getUrlFullxfull',
        'full_height' => 'getFullHeight',
        'full_width' => 'getFullWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['listing_image_id'] = $data['listing_image_id'] ?? null;
        $this->container['hex_code'] = $data['hex_code'] ?? null;
        $this->container['red'] = $data['red'] ?? null;
        $this->container['green'] = $data['green'] ?? null;
        $this->container['blue'] = $data['blue'] ?? null;
        $this->container['hue'] = $data['hue'] ?? null;
        $this->container['saturation'] = $data['saturation'] ?? null;
        $this->container['brightness'] = $data['brightness'] ?? null;
        $this->container['is_black_and_white'] = $data['is_black_and_white'] ?? null;
        $this->container['creation_tsz'] = $data['creation_tsz'] ?? null;
        $this->container['rank'] = $data['rank'] ?? null;
        $this->container['url_75x75'] = $data['url_75x75'] ?? null;
        $this->container['url_170x135'] = $data['url_170x135'] ?? null;
        $this->container['url_570x_n'] = $data['url_570x_n'] ?? null;
        $this->container['url_fullxfull'] = $data['url_fullxfull'] ?? null;
        $this->container['full_height'] = $data['full_height'] ?? null;
        $this->container['full_width'] = $data['full_width'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_id'] === null) {
            $invalidProperties[] = "'listing_id' can't be null";
        }
        if (($this->container['listing_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'listing_id', must be bigger than or equal to 1.";
        }

        if ($this->container['listing_image_id'] === null) {
            $invalidProperties[] = "'listing_image_id' can't be null";
        }
        if (($this->container['listing_image_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'listing_image_id', must be bigger than or equal to 1.";
        }

        if ($this->container['hex_code'] === null) {
            $invalidProperties[] = "'hex_code' can't be null";
        }
        if ($this->container['red'] === null) {
            $invalidProperties[] = "'red' can't be null";
        }
        if (($this->container['red'] < 0)) {
            $invalidProperties[] = "invalid value for 'red', must be bigger than or equal to 0.";
        }

        if ($this->container['green'] === null) {
            $invalidProperties[] = "'green' can't be null";
        }
        if (($this->container['green'] < 0)) {
            $invalidProperties[] = "invalid value for 'green', must be bigger than or equal to 0.";
        }

        if ($this->container['blue'] === null) {
            $invalidProperties[] = "'blue' can't be null";
        }
        if (($this->container['blue'] < 0)) {
            $invalidProperties[] = "invalid value for 'blue', must be bigger than or equal to 0.";
        }

        if ($this->container['hue'] === null) {
            $invalidProperties[] = "'hue' can't be null";
        }
        if (($this->container['hue'] < 0)) {
            $invalidProperties[] = "invalid value for 'hue', must be bigger than or equal to 0.";
        }

        if ($this->container['saturation'] === null) {
            $invalidProperties[] = "'saturation' can't be null";
        }
        if (($this->container['saturation'] < 0)) {
            $invalidProperties[] = "invalid value for 'saturation', must be bigger than or equal to 0.";
        }

        if ($this->container['brightness'] === null) {
            $invalidProperties[] = "'brightness' can't be null";
        }
        if (($this->container['brightness'] < 0)) {
            $invalidProperties[] = "invalid value for 'brightness', must be bigger than or equal to 0.";
        }

        if ($this->container['is_black_and_white'] === null) {
            $invalidProperties[] = "'is_black_and_white' can't be null";
        }
        if ($this->container['creation_tsz'] === null) {
            $invalidProperties[] = "'creation_tsz' can't be null";
        }
        if (($this->container['creation_tsz'] < 0)) {
            $invalidProperties[] = "invalid value for 'creation_tsz', must be bigger than or equal to 0.";
        }

        if ($this->container['rank'] === null) {
            $invalidProperties[] = "'rank' can't be null";
        }
        if (($this->container['rank'] < 0)) {
            $invalidProperties[] = "invalid value for 'rank', must be bigger than or equal to 0.";
        }

        if ($this->container['url_75x75'] === null) {
            $invalidProperties[] = "'url_75x75' can't be null";
        }
        if ($this->container['url_170x135'] === null) {
            $invalidProperties[] = "'url_170x135' can't be null";
        }
        if ($this->container['url_570x_n'] === null) {
            $invalidProperties[] = "'url_570x_n' can't be null";
        }
        if ($this->container['url_fullxfull'] === null) {
            $invalidProperties[] = "'url_fullxfull' can't be null";
        }
        if ($this->container['full_height'] === null) {
            $invalidProperties[] = "'full_height' can't be null";
        }
        if (($this->container['full_height'] < 0)) {
            $invalidProperties[] = "invalid value for 'full_height', must be bigger than or equal to 0.";
        }

        if ($this->container['full_width'] === null) {
            $invalidProperties[] = "'full_width' can't be null";
        }
        if (($this->container['full_width'] < 0)) {
            $invalidProperties[] = "invalid value for 'full_width', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id The unique numeric ID for a listing in a specific [shop](/documentation/reference#tag/Shop).
     *
     * @return self
     */
    public function setListingId($listing_id)
    {

        if (($listing_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $listing_id when calling ListingImage., must be bigger than or equal to 1.');
        }

        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets listing_image_id
     *
     * @return int
     */
    public function getListingImageId()
    {
        return $this->container['listing_image_id'];
    }

    /**
     * Sets listing_image_id
     *
     * @param int $listing_image_id The unique numeric image ID of an image in a listing.
     *
     * @return self
     */
    public function setListingImageId($listing_image_id)
    {

        if (($listing_image_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $listing_image_id when calling ListingImage., must be bigger than or equal to 1.');
        }

        $this->container['listing_image_id'] = $listing_image_id;

        return $this;
    }

    /**
     * Gets hex_code
     *
     * @return string
     */
    public function getHexCode()
    {
        return $this->container['hex_code'];
    }

    /**
     * Sets hex_code
     *
     * @param string $hex_code The webhex string for the image's average color, in webhex notation.
     *
     * @return self
     */
    public function setHexCode($hex_code)
    {
        $this->container['hex_code'] = $hex_code;

        return $this;
    }

    /**
     * Gets red
     *
     * @return int
     */
    public function getRed()
    {
        return $this->container['red'];
    }

    /**
     * Sets red
     *
     * @param int $red The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     *
     * @return self
     */
    public function setRed($red)
    {

        if (($red < 0)) {
            throw new \InvalidArgumentException('invalid value for $red when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['red'] = $red;

        return $this;
    }

    /**
     * Gets green
     *
     * @return int
     */
    public function getGreen()
    {
        return $this->container['green'];
    }

    /**
     * Sets green
     *
     * @param int $green The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     *
     * @return self
     */
    public function setGreen($green)
    {

        if (($green < 0)) {
            throw new \InvalidArgumentException('invalid value for $green when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['green'] = $green;

        return $this;
    }

    /**
     * Gets blue
     *
     * @return int
     */
    public function getBlue()
    {
        return $this->container['blue'];
    }

    /**
     * Sets blue
     *
     * @param int $blue The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     *
     * @return self
     */
    public function setBlue($blue)
    {

        if (($blue < 0)) {
            throw new \InvalidArgumentException('invalid value for $blue when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['blue'] = $blue;

        return $this;
    }

    /**
     * Gets hue
     *
     * @return int
     */
    public function getHue()
    {
        return $this->container['hue'];
    }

    /**
     * Sets hue
     *
     * @param int $hue The numeric hue equal to the image's average hue, from 0-360 (HSV color).
     *
     * @return self
     */
    public function setHue($hue)
    {

        if (($hue < 0)) {
            throw new \InvalidArgumentException('invalid value for $hue when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['hue'] = $hue;

        return $this;
    }

    /**
     * Gets saturation
     *
     * @return int
     */
    public function getSaturation()
    {
        return $this->container['saturation'];
    }

    /**
     * Sets saturation
     *
     * @param int $saturation The numeric saturation equal to the image's average saturation, from 0-100 (HSV color).
     *
     * @return self
     */
    public function setSaturation($saturation)
    {

        if (($saturation < 0)) {
            throw new \InvalidArgumentException('invalid value for $saturation when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['saturation'] = $saturation;

        return $this;
    }

    /**
     * Gets brightness
     *
     * @return int
     */
    public function getBrightness()
    {
        return $this->container['brightness'];
    }

    /**
     * Sets brightness
     *
     * @param int $brightness The numeric brightness equal to the image's average brightness, from 0-100 (HSV color).
     *
     * @return self
     */
    public function setBrightness($brightness)
    {

        if (($brightness < 0)) {
            throw new \InvalidArgumentException('invalid value for $brightness when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['brightness'] = $brightness;

        return $this;
    }

    /**
     * Gets is_black_and_white
     *
     * @return bool
     */
    public function getIsBlackAndWhite()
    {
        return $this->container['is_black_and_white'];
    }

    /**
     * Sets is_black_and_white
     *
     * @param bool $is_black_and_white When true, the image is in black & white.
     *
     * @return self
     */
    public function setIsBlackAndWhite($is_black_and_white)
    {
        $this->container['is_black_and_white'] = $is_black_and_white;

        return $this;
    }

    /**
     * Gets creation_tsz
     *
     * @return int
     */
    public function getCreationTsz()
    {
        return $this->container['creation_tsz'];
    }

    /**
     * Sets creation_tsz
     *
     * @param int $creation_tsz The listing image\\'s creation time, in epoch seconds.
     *
     * @return self
     */
    public function setCreationTsz($creation_tsz)
    {

        if (($creation_tsz < 0)) {
            throw new \InvalidArgumentException('invalid value for $creation_tsz when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['creation_tsz'] = $creation_tsz;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
     *
     * @return self
     */
    public function setRank($rank)
    {

        if (($rank < 0)) {
            throw new \InvalidArgumentException('invalid value for $rank when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets url_75x75
     *
     * @return string
     */
    public function getUrl75x75()
    {
        return $this->container['url_75x75'];
    }

    /**
     * Sets url_75x75
     *
     * @param string $url_75x75 The url string for a 75x75 pixel thumbnail of the image.
     *
     * @return self
     */
    public function setUrl75x75($url_75x75)
    {
        $this->container['url_75x75'] = $url_75x75;

        return $this;
    }

    /**
     * Gets url_170x135
     *
     * @return string
     */
    public function getUrl170x135()
    {
        return $this->container['url_170x135'];
    }

    /**
     * Sets url_170x135
     *
     * @param string $url_170x135 The url string for a 170x135 pixel thumbnail of the image.
     *
     * @return self
     */
    public function setUrl170x135($url_170x135)
    {
        $this->container['url_170x135'] = $url_170x135;

        return $this;
    }

    /**
     * Gets url_570x_n
     *
     * @return string
     */
    public function getUrl570xN()
    {
        return $this->container['url_570x_n'];
    }

    /**
     * Sets url_570x_n
     *
     * @param string $url_570x_n The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.
     *
     * @return self
     */
    public function setUrl570xN($url_570x_n)
    {
        $this->container['url_570x_n'] = $url_570x_n;

        return $this;
    }

    /**
     * Gets url_fullxfull
     *
     * @return string
     */
    public function getUrlFullxfull()
    {
        return $this->container['url_fullxfull'];
    }

    /**
     * Sets url_fullxfull
     *
     * @param string $url_fullxfull The url string for the full-size image, up to 3000p pixels in each dimension.
     *
     * @return self
     */
    public function setUrlFullxfull($url_fullxfull)
    {
        $this->container['url_fullxfull'] = $url_fullxfull;

        return $this;
    }

    /**
     * Gets full_height
     *
     * @return int
     */
    public function getFullHeight()
    {
        return $this->container['full_height'];
    }

    /**
     * Sets full_height
     *
     * @param int $full_height The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.
     *
     * @return self
     */
    public function setFullHeight($full_height)
    {

        if (($full_height < 0)) {
            throw new \InvalidArgumentException('invalid value for $full_height when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['full_height'] = $full_height;

        return $this;
    }

    /**
     * Gets full_width
     *
     * @return int
     */
    public function getFullWidth()
    {
        return $this->container['full_width'];
    }

    /**
     * Sets full_width
     *
     * @param int $full_width The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.
     *
     * @return self
     */
    public function setFullWidth($full_width)
    {

        if (($full_width < 0)) {
            throw new \InvalidArgumentException('invalid value for $full_width when calling ListingImage., must be bigger than or equal to 0.');
        }

        $this->container['full_width'] = $full_width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


