<?php
/**
 * PaymentAdjustment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Model;

use \ArrayAccess;
use \EtsyApi\ObjectSerializer;

/**
 * PaymentAdjustment Class Doc Comment
 *
 * @category Class
 * @description Represents a refund, which applies to a prior Etsy payment. All monetary amounts are in USD pennies unless otherwise specified.
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PaymentAdjustment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentAdjustment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_adjustment_id' => 'int',
        'payment_id' => 'int',
        'status' => 'string',
        'is_success' => 'bool',
        'user_id' => 'int',
        'reason_code' => 'string',
        'total_adjustment_amount' => 'int',
        'shop_total_adjustment_amount' => 'int',
        'buyer_total_adjustment_amount' => 'int',
        'total_fee_adjustment_amount' => 'int',
        'create_timestamp' => 'int',
        'update_timestamp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_adjustment_id' => null,
        'payment_id' => null,
        'status' => null,
        'is_success' => null,
        'user_id' => null,
        'reason_code' => null,
        'total_adjustment_amount' => null,
        'shop_total_adjustment_amount' => null,
        'buyer_total_adjustment_amount' => null,
        'total_fee_adjustment_amount' => null,
        'create_timestamp' => null,
        'update_timestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_adjustment_id' => 'payment_adjustment_id',
        'payment_id' => 'payment_id',
        'status' => 'status',
        'is_success' => 'is_success',
        'user_id' => 'user_id',
        'reason_code' => 'reason_code',
        'total_adjustment_amount' => 'total_adjustment_amount',
        'shop_total_adjustment_amount' => 'shop_total_adjustment_amount',
        'buyer_total_adjustment_amount' => 'buyer_total_adjustment_amount',
        'total_fee_adjustment_amount' => 'total_fee_adjustment_amount',
        'create_timestamp' => 'create_timestamp',
        'update_timestamp' => 'update_timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_adjustment_id' => 'setPaymentAdjustmentId',
        'payment_id' => 'setPaymentId',
        'status' => 'setStatus',
        'is_success' => 'setIsSuccess',
        'user_id' => 'setUserId',
        'reason_code' => 'setReasonCode',
        'total_adjustment_amount' => 'setTotalAdjustmentAmount',
        'shop_total_adjustment_amount' => 'setShopTotalAdjustmentAmount',
        'buyer_total_adjustment_amount' => 'setBuyerTotalAdjustmentAmount',
        'total_fee_adjustment_amount' => 'setTotalFeeAdjustmentAmount',
        'create_timestamp' => 'setCreateTimestamp',
        'update_timestamp' => 'setUpdateTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_adjustment_id' => 'getPaymentAdjustmentId',
        'payment_id' => 'getPaymentId',
        'status' => 'getStatus',
        'is_success' => 'getIsSuccess',
        'user_id' => 'getUserId',
        'reason_code' => 'getReasonCode',
        'total_adjustment_amount' => 'getTotalAdjustmentAmount',
        'shop_total_adjustment_amount' => 'getShopTotalAdjustmentAmount',
        'buyer_total_adjustment_amount' => 'getBuyerTotalAdjustmentAmount',
        'total_fee_adjustment_amount' => 'getTotalFeeAdjustmentAmount',
        'create_timestamp' => 'getCreateTimestamp',
        'update_timestamp' => 'getUpdateTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_adjustment_id'] = $data['payment_adjustment_id'] ?? null;
        $this->container['payment_id'] = $data['payment_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['is_success'] = $data['is_success'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['reason_code'] = $data['reason_code'] ?? null;
        $this->container['total_adjustment_amount'] = $data['total_adjustment_amount'] ?? null;
        $this->container['shop_total_adjustment_amount'] = $data['shop_total_adjustment_amount'] ?? null;
        $this->container['buyer_total_adjustment_amount'] = $data['buyer_total_adjustment_amount'] ?? null;
        $this->container['total_fee_adjustment_amount'] = $data['total_fee_adjustment_amount'] ?? null;
        $this->container['create_timestamp'] = $data['create_timestamp'] ?? null;
        $this->container['update_timestamp'] = $data['update_timestamp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_adjustment_id'] === null) {
            $invalidProperties[] = "'payment_adjustment_id' can't be null";
        }
        if (($this->container['payment_adjustment_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'payment_adjustment_id', must be bigger than or equal to 1.";
        }

        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        if (($this->container['payment_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'payment_id', must be bigger than or equal to 1.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['is_success'] === null) {
            $invalidProperties[] = "'is_success' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if (($this->container['user_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'user_id', must be bigger than or equal to 1.";
        }

        if ($this->container['reason_code'] === null) {
            $invalidProperties[] = "'reason_code' can't be null";
        }
        if ($this->container['total_adjustment_amount'] === null) {
            $invalidProperties[] = "'total_adjustment_amount' can't be null";
        }
        if (($this->container['total_adjustment_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_adjustment_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['shop_total_adjustment_amount'] === null) {
            $invalidProperties[] = "'shop_total_adjustment_amount' can't be null";
        }
        if (($this->container['shop_total_adjustment_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'shop_total_adjustment_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['buyer_total_adjustment_amount'] === null) {
            $invalidProperties[] = "'buyer_total_adjustment_amount' can't be null";
        }
        if (($this->container['buyer_total_adjustment_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'buyer_total_adjustment_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['total_fee_adjustment_amount'] === null) {
            $invalidProperties[] = "'total_fee_adjustment_amount' can't be null";
        }
        if (($this->container['total_fee_adjustment_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_fee_adjustment_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['create_timestamp'] === null) {
            $invalidProperties[] = "'create_timestamp' can't be null";
        }
        if (($this->container['create_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'create_timestamp', must be bigger than or equal to 946684800.";
        }

        if ($this->container['update_timestamp'] === null) {
            $invalidProperties[] = "'update_timestamp' can't be null";
        }
        if (($this->container['update_timestamp'] < 946684800)) {
            $invalidProperties[] = "invalid value for 'update_timestamp', must be bigger than or equal to 946684800.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_adjustment_id
     *
     * @return int
     */
    public function getPaymentAdjustmentId()
    {
        return $this->container['payment_adjustment_id'];
    }

    /**
     * Sets payment_adjustment_id
     *
     * @param int $payment_adjustment_id The numeric ID for a payment adjustment.
     *
     * @return self
     */
    public function setPaymentAdjustmentId($payment_adjustment_id)
    {

        if (($payment_adjustment_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $payment_adjustment_id when calling PaymentAdjustment., must be bigger than or equal to 1.');
        }

        $this->container['payment_adjustment_id'] = $payment_adjustment_id;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int $payment_id A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {

        if (($payment_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $payment_id when calling PaymentAdjustment., must be bigger than or equal to 1.');
        }

        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status string of the payment adjustment.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_success
     *
     * @return bool
     */
    public function getIsSuccess()
    {
        return $this->container['is_success'];
    }

    /**
     * Sets is_success
     *
     * @param bool $is_success When true, the payment adjustment was or is likely to complete successfully.
     *
     * @return self
     */
    public function setIsSuccess($is_success)
    {
        $this->container['is_success'] = $is_success;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (($user_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $user_id when calling PaymentAdjustment., must be bigger than or equal to 1.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code A human-readable string describing the reason for the refund.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets total_adjustment_amount
     *
     * @return int
     */
    public function getTotalAdjustmentAmount()
    {
        return $this->container['total_adjustment_amount'];
    }

    /**
     * Sets total_adjustment_amount
     *
     * @param int $total_adjustment_amount The total numeric amount of the refund in the payment currency.
     *
     * @return self
     */
    public function setTotalAdjustmentAmount($total_adjustment_amount)
    {

        if (($total_adjustment_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_adjustment_amount when calling PaymentAdjustment., must be bigger than or equal to 0.');
        }

        $this->container['total_adjustment_amount'] = $total_adjustment_amount;

        return $this;
    }

    /**
     * Gets shop_total_adjustment_amount
     *
     * @return int
     */
    public function getShopTotalAdjustmentAmount()
    {
        return $this->container['shop_total_adjustment_amount'];
    }

    /**
     * Sets shop_total_adjustment_amount
     *
     * @param int $shop_total_adjustment_amount The numeric amount of the refund in the shop currency.
     *
     * @return self
     */
    public function setShopTotalAdjustmentAmount($shop_total_adjustment_amount)
    {

        if (($shop_total_adjustment_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $shop_total_adjustment_amount when calling PaymentAdjustment., must be bigger than or equal to 0.');
        }

        $this->container['shop_total_adjustment_amount'] = $shop_total_adjustment_amount;

        return $this;
    }

    /**
     * Gets buyer_total_adjustment_amount
     *
     * @return int
     */
    public function getBuyerTotalAdjustmentAmount()
    {
        return $this->container['buyer_total_adjustment_amount'];
    }

    /**
     * Sets buyer_total_adjustment_amount
     *
     * @param int $buyer_total_adjustment_amount The numeric amount of the refund in the buyer currency.
     *
     * @return self
     */
    public function setBuyerTotalAdjustmentAmount($buyer_total_adjustment_amount)
    {

        if (($buyer_total_adjustment_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $buyer_total_adjustment_amount when calling PaymentAdjustment., must be bigger than or equal to 0.');
        }

        $this->container['buyer_total_adjustment_amount'] = $buyer_total_adjustment_amount;

        return $this;
    }

    /**
     * Gets total_fee_adjustment_amount
     *
     * @return int
     */
    public function getTotalFeeAdjustmentAmount()
    {
        return $this->container['total_fee_adjustment_amount'];
    }

    /**
     * Sets total_fee_adjustment_amount
     *
     * @param int $total_fee_adjustment_amount The numeric amount of card processing fees associated with a payment adjustment.
     *
     * @return self
     */
    public function setTotalFeeAdjustmentAmount($total_fee_adjustment_amount)
    {

        if (($total_fee_adjustment_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_fee_adjustment_amount when calling PaymentAdjustment., must be bigger than or equal to 0.');
        }

        $this->container['total_fee_adjustment_amount'] = $total_fee_adjustment_amount;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The creation date and time the payment adjustment in epoch seconds.
     *
     * @return self
     */
    public function setCreateTimestamp($create_timestamp)
    {

        if (($create_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $create_timestamp when calling PaymentAdjustment., must be bigger than or equal to 946684800.');
        }

        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp The date and time of the last change to the payment adjustment in epoch seconds.
     *
     * @return self
     */
    public function setUpdateTimestamp($update_timestamp)
    {

        if (($update_timestamp < 946684800)) {
            throw new \InvalidArgumentException('invalid value for $update_timestamp when calling PaymentAdjustment., must be bigger than or equal to 946684800.');
        }

        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


