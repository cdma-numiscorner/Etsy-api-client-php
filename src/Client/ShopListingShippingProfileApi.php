<?php
/**
 * ShopListingShippingProfileApi
 * PHP version 7.2
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Etsy OpenAPI
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API reference documents endpoints are meant to replace <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/developers/documentation\">Etsy's current Open API</a> this year. Use of the API is subject to the <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/api\">API Terms of Use</a>.</p><p class=\"wt-pb-xs-5 wt-text-title-01\">If you would like to make requests to the Open API v3 endpoints, please fill out <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSc4qzVlgjkzEkaQvpgX00xvJLjlomRoS-60G9ob_FqCfmbCrA/viewform\">the intake form</a>.</p><p class=\"wt-pb-xs-2\">The API is currently in an experimental, alpha phase meant to validate feature and functionality requirements. During this phase, endpoints may have significant design changes but developers will have an opportunity to preview endpoints and provide feedback that will help shape Etsy's Open API functionality. The alpha API design is not stable and will likely change in response to feedback but we'll communicate changes as they are made.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable, but many endpoints are currently interface stubs and will return a \"501 Not Implemented\" response code when called; the documentation for each of these stub endpoints includes an alert calling this out.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/issues/new/choose\">please add an issue in Github</a>. You grant us a license to use your feedback as described in Etsy's primary <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://www.etsy.com/legal/terms-of-use\">Terms of Use.</a></p></div>&copy; 2021 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EtsyApi\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EtsyApi\ApiException;
use EtsyApi\Configuration;
use EtsyApi\HeaderSelector;
use EtsyApi\ObjectSerializer;

/**
 * ShopListingShippingProfileApi Class Doc Comment
 *
 * @category Class
 * @package  EtsyApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShopListingShippingProfileApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createListingShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title The name string of this shipping profile. (required)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (required)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (required)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to 'business_days')
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to 'none')
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to '')
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfile|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function createListingShippingProfile($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit = 'business_days', $destination_country_iso = 'null', $destination_region = 'none', $origin_postal_code = '', $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->createListingShippingProfileWithHttpInfo($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation createListingShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title The name string of this shipping profile. (required)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (required)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (required)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to 'business_days')
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to 'none')
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to '')
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfile|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createListingShippingProfileWithHttpInfo($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit = 'business_days', $destination_country_iso = 'null', $destination_region = 'none', $origin_postal_code = '', $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $request = $this->createListingShippingProfileRequest($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfile' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfile';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createListingShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title The name string of this shipping profile. (required)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (required)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (required)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to 'business_days')
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to 'none')
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to '')
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createListingShippingProfileAsync($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit = 'business_days', $destination_country_iso = 'null', $destination_region = 'none', $origin_postal_code = '', $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->createListingShippingProfileAsyncWithHttpInfo($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createListingShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title The name string of this shipping profile. (required)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (required)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (required)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to 'business_days')
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to 'none')
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to '')
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createListingShippingProfileAsyncWithHttpInfo($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit = 'business_days', $destination_country_iso = 'null', $destination_region = 'none', $origin_postal_code = '', $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfile';
        $request = $this->createListingShippingProfileRequest($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createListingShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title The name string of this shipping profile. (required)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (required)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (required)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to 'business_days')
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to 'none')
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to '')
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createListingShippingProfileRequest($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit = 'business_days', $destination_country_iso = 'null', $destination_region = 'none', $origin_postal_code = '', $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createListingShippingProfile'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling createListingShippingProfile'
            );
        }
        // verify the required parameter 'origin_country_iso' is set
        if ($origin_country_iso === null || (is_array($origin_country_iso) && count($origin_country_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_iso when calling createListingShippingProfile'
            );
        }
        // verify the required parameter 'primary_cost' is set
        if ($primary_cost === null || (is_array($primary_cost) && count($primary_cost) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primary_cost when calling createListingShippingProfile'
            );
        }
        // verify the required parameter 'secondary_cost' is set
        if ($secondary_cost === null || (is_array($secondary_cost) && count($secondary_cost) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secondary_cost when calling createListingShippingProfile'
            );
        }
        // verify the required parameter 'min_processing_time' is set
        if ($min_processing_time === null || (is_array($min_processing_time) && count($min_processing_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $min_processing_time when calling createListingShippingProfile'
            );
        }
        if ($min_processing_time > 10) {
            throw new \InvalidArgumentException('invalid value for "$min_processing_time" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be smaller than or equal to 10.');
        }
        if ($min_processing_time < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_processing_time" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'max_processing_time' is set
        if ($max_processing_time === null || (is_array($max_processing_time) && count($max_processing_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $max_processing_time when calling createListingShippingProfile'
            );
        }
        if ($max_processing_time > 10) {
            throw new \InvalidArgumentException('invalid value for "$max_processing_time" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be smaller than or equal to 10.');
        }
        if ($max_processing_time < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_processing_time" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be bigger than or equal to 1.');
        }

        if ($shipping_carrier_id !== null && $shipping_carrier_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$shipping_carrier_id" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be bigger than or equal to 0.');
        }

        if ($min_delivery_days !== null && $min_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be smaller than or equal to 45.');
        }
        if ($min_delivery_days !== null && $min_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be bigger than or equal to 1.');
        }

        if ($max_delivery_days !== null && $max_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be smaller than or equal to 45.');
        }
        if ($max_delivery_days !== null && $max_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfile, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($origin_country_iso !== null) {
            $formParams['origin_country_iso'] = ObjectSerializer::toFormValue($origin_country_iso);
        }
        // form params
        if ($primary_cost !== null) {
            $formParams['primary_cost'] = ObjectSerializer::toFormValue($primary_cost);
        }
        // form params
        if ($secondary_cost !== null) {
            $formParams['secondary_cost'] = ObjectSerializer::toFormValue($secondary_cost);
        }
        // form params
        if ($min_processing_time !== null) {
            $formParams['min_processing_time'] = ObjectSerializer::toFormValue($min_processing_time);
        }
        // form params
        if ($max_processing_time !== null) {
            $formParams['max_processing_time'] = ObjectSerializer::toFormValue($max_processing_time);
        }
        // form params
        if ($processing_time_unit !== null) {
            $formParams['processing_time_unit'] = ObjectSerializer::toFormValue($processing_time_unit);
        }
        // form params
        if ($destination_country_iso !== null) {
            $formParams['destination_country_iso'] = ObjectSerializer::toFormValue($destination_country_iso);
        }
        // form params
        if ($destination_region !== null) {
            $formParams['destination_region'] = ObjectSerializer::toFormValue($destination_region);
        }
        // form params
        if ($origin_postal_code !== null) {
            $formParams['origin_postal_code'] = ObjectSerializer::toFormValue($origin_postal_code);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createListingShippingProfileDestination
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfileDestination|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function createListingShippingProfileDestination($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->createListingShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation createListingShippingProfileDestinationWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfileDestination|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createListingShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $request = $this->createListingShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\EtsyApi\Model\ListingShippingProfileDestination' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfileDestination', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfileDestination';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfileDestination',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createListingShippingProfileDestinationAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createListingShippingProfileDestinationAsync($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->createListingShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createListingShippingProfileDestinationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createListingShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfileDestination';
        $request = $this->createListingShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createListingShippingProfileDestination'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (required)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (required)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createListingShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createListingShippingProfileDestination'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling createListingShippingProfileDestination'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'primary_cost' is set
        if ($primary_cost === null || (is_array($primary_cost) && count($primary_cost) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primary_cost when calling createListingShippingProfileDestination'
            );
        }
        // verify the required parameter 'secondary_cost' is set
        if ($secondary_cost === null || (is_array($secondary_cost) && count($secondary_cost) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secondary_cost when calling createListingShippingProfileDestination'
            );
        }
        if ($shipping_carrier_id !== null && $shipping_carrier_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$shipping_carrier_id" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be bigger than or equal to 0.');
        }

        if ($min_delivery_days !== null && $min_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be smaller than or equal to 45.');
        }
        if ($min_delivery_days !== null && $min_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        if ($max_delivery_days !== null && $max_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be smaller than or equal to 45.');
        }
        if ($max_delivery_days !== null && $max_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileDestination, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // form params
        if ($primary_cost !== null) {
            $formParams['primary_cost'] = ObjectSerializer::toFormValue($primary_cost);
        }
        // form params
        if ($secondary_cost !== null) {
            $formParams['secondary_cost'] = ObjectSerializer::toFormValue($secondary_cost);
        }
        // form params
        if ($destination_country_iso !== null) {
            $formParams['destination_country_iso'] = ObjectSerializer::toFormValue($destination_country_iso);
        }
        // form params
        if ($destination_region !== null) {
            $formParams['destination_region'] = ObjectSerializer::toFormValue($destination_region);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createListingShippingProfileUpgrade
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (required)
     * @param  float $price Additional cost of adding the shipping upgrade. (required)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (required)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfileUpgrade|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function createListingShippingProfileUpgrade($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->createListingShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation createListingShippingProfileUpgradeWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (required)
     * @param  float $price Additional cost of adding the shipping upgrade. (required)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (required)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfileUpgrade|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createListingShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $request = $this->createListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfileUpgrade' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfileUpgrade', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfileUpgrade';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfileUpgrade',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createListingShippingProfileUpgradeAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (required)
     * @param  float $price Additional cost of adding the shipping upgrade. (required)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (required)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createListingShippingProfileUpgradeAsync($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->createListingShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createListingShippingProfileUpgradeAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (required)
     * @param  float $price Additional cost of adding the shipping upgrade. (required)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (required)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createListingShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfileUpgrade';
        $request = $this->createListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createListingShippingProfileUpgrade'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (required)
     * @param  float $price Additional cost of adding the shipping upgrade. (required)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (required)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional, default to 0)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id = 0, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createListingShippingProfileUpgrade'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling createListingShippingProfileUpgrade'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling createListingShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'upgrade_name' is set
        if ($upgrade_name === null || (is_array($upgrade_name) && count($upgrade_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upgrade_name when calling createListingShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling createListingShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'secondary_price' is set
        if ($secondary_price === null || (is_array($secondary_price) && count($secondary_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secondary_price when calling createListingShippingProfileUpgrade'
            );
        }
        if ($shipping_carrier_id !== null && $shipping_carrier_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$shipping_carrier_id" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be bigger than or equal to 0.');
        }

        if ($min_delivery_days !== null && $min_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be smaller than or equal to 45.');
        }
        if ($min_delivery_days !== null && $min_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        if ($max_delivery_days !== null && $max_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be smaller than or equal to 45.');
        }
        if ($max_delivery_days !== null && $max_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.createListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}/upgrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($upgrade_name !== null) {
            $formParams['upgrade_name'] = ObjectSerializer::toFormValue($upgrade_name);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($secondary_price !== null) {
            $formParams['secondary_price'] = ObjectSerializer::toFormValue($secondary_price);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteListingShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteListingShippingProfile($shop_id, $shipping_profile_id)
    {
        $this->deleteListingShippingProfileWithHttpInfo($shop_id, $shipping_profile_id);
    }

    /**
     * Operation deleteListingShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteListingShippingProfileWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $request = $this->deleteListingShippingProfileRequest($shop_id, $shipping_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteListingShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingShippingProfileAsync($shop_id, $shipping_profile_id)
    {
        return $this->deleteListingShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteListingShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '';
        $request = $this->deleteListingShippingProfileRequest($shop_id, $shipping_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteListingShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteListingShippingProfileRequest($shop_id, $shipping_profile_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteListingShippingProfile'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfile, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling deleteListingShippingProfile'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfile, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteListingShippingProfileDestination
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteListingShippingProfileDestination($shop_id, $shipping_profile_destination_id)
    {
        $this->deleteListingShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_destination_id);
    }

    /**
     * Operation deleteListingShippingProfileDestinationWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteListingShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_destination_id)
    {
        $request = $this->deleteListingShippingProfileDestinationRequest($shop_id, $shipping_profile_destination_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteListingShippingProfileDestinationAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingShippingProfileDestinationAsync($shop_id, $shipping_profile_destination_id)
    {
        return $this->deleteListingShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_destination_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteListingShippingProfileDestinationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_destination_id)
    {
        $returnType = '';
        $request = $this->deleteListingShippingProfileDestinationRequest($shop_id, $shipping_profile_destination_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteListingShippingProfileDestination'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteListingShippingProfileDestinationRequest($shop_id, $shipping_profile_destination_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteListingShippingProfileDestination'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_destination_id' is set
        if ($shipping_profile_destination_id === null || (is_array($shipping_profile_destination_id) && count($shipping_profile_destination_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_destination_id when calling deleteListingShippingProfileDestination'
            );
        }
        if ($shipping_profile_destination_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_destination_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfileDestination, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/destinations/{shipping_profile_destination_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_destination_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_destination_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_destination_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteListingShippingProfileUpgrade
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteListingShippingProfileUpgrade($shop_id, $shipping_profile_id, $upgrade_id)
    {
        $this->deleteListingShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id);
    }

    /**
     * Operation deleteListingShippingProfileUpgradeWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteListingShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id)
    {
        $request = $this->deleteListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteListingShippingProfileUpgradeAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingShippingProfileUpgradeAsync($shop_id, $shipping_profile_id, $upgrade_id)
    {
        return $this->deleteListingShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteListingShippingProfileUpgradeAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id)
    {
        $returnType = '';
        $request = $this->deleteListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteListingShippingProfileUpgrade'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteListingShippingProfileUpgrade'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling deleteListingShippingProfileUpgrade'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'upgrade_id' is set
        if ($upgrade_id === null || (is_array($upgrade_id) && count($upgrade_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upgrade_id when calling deleteListingShippingProfileUpgrade'
            );
        }
        if ($upgrade_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$upgrade_id" when calling ShopListingShippingProfileApi.deleteListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}/upgrades/{upgrade_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($upgrade_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upgrade_id' . '}',
                ObjectSerializer::toPathValue($upgrade_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfile|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function getListingShippingProfile($shop_id, $shipping_profile_id)
    {
        list($response) = $this->getListingShippingProfileWithHttpInfo($shop_id, $shipping_profile_id);
        return $response;
    }

    /**
     * Operation getListingShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfile|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingShippingProfileWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $request = $this->getListingShippingProfileRequest($shop_id, $shipping_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfile' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfile';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfileAsync($shop_id, $shipping_profile_id)
    {
        return $this->getListingShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfile';
        $request = $this->getListingShippingProfileRequest($shop_id, $shipping_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListingShippingProfileRequest($shop_id, $shipping_profile_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingShippingProfile'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.getListingShippingProfile, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling getListingShippingProfile'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.getListingShippingProfile, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingShippingProfileDestinationsByShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfileDestinations|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function getListingShippingProfileDestinationsByShippingProfile($shop_id, $shipping_profile_id, $limit = 25, $offset = 0)
    {
        list($response) = $this->getListingShippingProfileDestinationsByShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation getListingShippingProfileDestinationsByShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfileDestinations|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingShippingProfileDestinationsByShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $limit = 25, $offset = 0)
    {
        $request = $this->getListingShippingProfileDestinationsByShippingProfileRequest($shop_id, $shipping_profile_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfileDestinations' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfileDestinations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfileDestinations';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfileDestinations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingShippingProfileDestinationsByShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfileDestinationsByShippingProfileAsync($shop_id, $shipping_profile_id, $limit = 25, $offset = 0)
    {
        return $this->getListingShippingProfileDestinationsByShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingShippingProfileDestinationsByShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfileDestinationsByShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $limit = 25, $offset = 0)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfileDestinations';
        $request = $this->getListingShippingProfileDestinationsByShippingProfileRequest($shop_id, $shipping_profile_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingShippingProfileDestinationsByShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListingShippingProfileDestinationsByShippingProfileRequest($shop_id, $shipping_profile_id, $limit = 25, $offset = 0)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingShippingProfileDestinationsByShippingProfile'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.getListingShippingProfileDestinationsByShippingProfile, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling getListingShippingProfileDestinationsByShippingProfile'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.getListingShippingProfileDestinationsByShippingProfile, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ShopListingShippingProfileApi.getListingShippingProfileDestinationsByShippingProfile, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ShopListingShippingProfileApi.getListingShippingProfileDestinationsByShippingProfile, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ShopListingShippingProfileApi.getListingShippingProfileDestinationsByShippingProfile, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingShippingProfileUpgrades
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfileUpgrades|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function getListingShippingProfileUpgrades($shop_id, $shipping_profile_id)
    {
        list($response) = $this->getListingShippingProfileUpgradesWithHttpInfo($shop_id, $shipping_profile_id);
        return $response;
    }

    /**
     * Operation getListingShippingProfileUpgradesWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfileUpgrades|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingShippingProfileUpgradesWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $request = $this->getListingShippingProfileUpgradesRequest($shop_id, $shipping_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfileUpgrades' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfileUpgrades', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfileUpgrades';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfileUpgrades',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingShippingProfileUpgradesAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfileUpgradesAsync($shop_id, $shipping_profile_id)
    {
        return $this->getListingShippingProfileUpgradesAsyncWithHttpInfo($shop_id, $shipping_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingShippingProfileUpgradesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfileUpgradesAsyncWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfileUpgrades';
        $request = $this->getListingShippingProfileUpgradesRequest($shop_id, $shipping_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingShippingProfileUpgrades'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListingShippingProfileUpgradesRequest($shop_id, $shipping_profile_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingShippingProfileUpgrades'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.getListingShippingProfileUpgrades, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling getListingShippingProfileUpgrades'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.getListingShippingProfileUpgrades, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}/upgrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingShippingProfiles
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfiles|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function getListingShippingProfiles($shop_id)
    {
        list($response) = $this->getListingShippingProfilesWithHttpInfo($shop_id);
        return $response;
    }

    /**
     * Operation getListingShippingProfilesWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfiles|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingShippingProfilesWithHttpInfo($shop_id)
    {
        $request = $this->getListingShippingProfilesRequest($shop_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfiles' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfiles', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfiles';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfiles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingShippingProfilesAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfilesAsync($shop_id)
    {
        return $this->getListingShippingProfilesAsyncWithHttpInfo($shop_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingShippingProfilesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingShippingProfilesAsyncWithHttpInfo($shop_id)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfiles';
        $request = $this->getListingShippingProfilesRequest($shop_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingShippingProfiles'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListingShippingProfilesRequest($shop_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingShippingProfiles'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.getListingShippingProfiles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShippingCarriers
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ShippingCarriers|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function getShippingCarriers($origin_country_iso)
    {
        list($response) = $this->getShippingCarriersWithHttpInfo($origin_country_iso);
        return $response;
    }

    /**
     * Operation getShippingCarriersWithHttpInfo
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ShippingCarriers|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShippingCarriersWithHttpInfo($origin_country_iso)
    {
        $request = $this->getShippingCarriersRequest($origin_country_iso);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ShippingCarriers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ShippingCarriers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ShippingCarriers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ShippingCarriers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShippingCarriersAsync
     *
     * 
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShippingCarriersAsync($origin_country_iso)
    {
        return $this->getShippingCarriersAsyncWithHttpInfo($origin_country_iso)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShippingCarriersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShippingCarriersAsyncWithHttpInfo($origin_country_iso)
    {
        $returnType = '\EtsyApi\Model\ShippingCarriers';
        $request = $this->getShippingCarriersRequest($origin_country_iso);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShippingCarriers'
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShippingCarriersRequest($origin_country_iso)
    {
        // verify the required parameter 'origin_country_iso' is set
        if ($origin_country_iso === null || (is_array($origin_country_iso) && count($origin_country_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_iso when calling getShippingCarriers'
            );
        }

        $resourcePath = '/v3/application/listings/shipping-carriers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($origin_country_iso !== null) {
            if('form' === 'form' && is_array($origin_country_iso)) {
                foreach($origin_country_iso as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['origin_country_iso'] = $origin_country_iso;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateListingShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $title The name string of this shipping profile. (optional)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (optional)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (optional)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (optional)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to PROCESSING_TIME_UNIT_BUSINESS_DAYS)
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to 'null')
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfile|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function updateListingShippingProfile($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = PROCESSING_TIME_UNIT_BUSINESS_DAYS, $origin_postal_code = 'null')
    {
        list($response) = $this->updateListingShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code);
        return $response;
    }

    /**
     * Operation updateListingShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $title The name string of this shipping profile. (optional)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (optional)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (optional)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (optional)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to PROCESSING_TIME_UNIT_BUSINESS_DAYS)
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to 'null')
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfile|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListingShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = PROCESSING_TIME_UNIT_BUSINESS_DAYS, $origin_postal_code = 'null')
    {
        $request = $this->updateListingShippingProfileRequest($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfile' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfile';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListingShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $title The name string of this shipping profile. (optional)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (optional)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (optional)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (optional)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to PROCESSING_TIME_UNIT_BUSINESS_DAYS)
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to 'null')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingShippingProfileAsync($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = PROCESSING_TIME_UNIT_BUSINESS_DAYS, $origin_postal_code = 'null')
    {
        return $this->updateListingShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListingShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $title The name string of this shipping profile. (optional)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (optional)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (optional)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (optional)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to PROCESSING_TIME_UNIT_BUSINESS_DAYS)
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to 'null')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = PROCESSING_TIME_UNIT_BUSINESS_DAYS, $origin_postal_code = 'null')
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfile';
        $request = $this->updateListingShippingProfileRequest($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateListingShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  string $title The name string of this shipping profile. (optional)
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (optional)
     * @param  int $min_processing_time The minimum time required to process to ship listings with this shipping profile. (optional)
     * @param  int $max_processing_time The maximum processing time the listing needs to ship. (optional)
     * @param  string $processing_time_unit The unit used to represent how long a processing time is. A week is equivalent to 5 business days. If none is provided, the unit is set to \\\&quot;business_days\\\&quot;. (optional, default to PROCESSING_TIME_UNIT_BUSINESS_DAYS)
     * @param  string $origin_postal_code The postal code string (not necessarily a number) for the location from which the listing ships. (optional, default to 'null')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateListingShippingProfileRequest($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = PROCESSING_TIME_UNIT_BUSINESS_DAYS, $origin_postal_code = 'null')
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateListingShippingProfile'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.updateListingShippingProfile, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling updateListingShippingProfile'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.updateListingShippingProfile, must be bigger than or equal to 1.');
        }

        if ($min_processing_time !== null && $min_processing_time > 10) {
            throw new \InvalidArgumentException('invalid value for "$min_processing_time" when calling ShopListingShippingProfileApi.updateListingShippingProfile, must be smaller than or equal to 10.');
        }
        if ($min_processing_time !== null && $min_processing_time < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_processing_time" when calling ShopListingShippingProfileApi.updateListingShippingProfile, must be bigger than or equal to 1.');
        }

        if ($max_processing_time !== null && $max_processing_time > 10) {
            throw new \InvalidArgumentException('invalid value for "$max_processing_time" when calling ShopListingShippingProfileApi.updateListingShippingProfile, must be smaller than or equal to 10.');
        }
        if ($max_processing_time !== null && $max_processing_time < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_processing_time" when calling ShopListingShippingProfileApi.updateListingShippingProfile, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($origin_country_iso !== null) {
            $formParams['origin_country_iso'] = ObjectSerializer::toFormValue($origin_country_iso);
        }
        // form params
        if ($min_processing_time !== null) {
            $formParams['min_processing_time'] = ObjectSerializer::toFormValue($min_processing_time);
        }
        // form params
        if ($max_processing_time !== null) {
            $formParams['max_processing_time'] = ObjectSerializer::toFormValue($max_processing_time);
        }
        // form params
        if ($processing_time_unit !== null) {
            $formParams['processing_time_unit'] = ObjectSerializer::toFormValue($processing_time_unit);
        }
        // form params
        if ($origin_postal_code !== null) {
            $formParams['origin_postal_code'] = ObjectSerializer::toFormValue($origin_postal_code);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateListingShippingProfileDestination
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (optional)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (optional)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfileDestination|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function updateListingShippingProfileDestination($shop_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->updateListingShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation updateListingShippingProfileDestinationWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (optional)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (optional)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfileDestination|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListingShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $request = $this->updateListingShippingProfileDestinationRequest($shop_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfileDestination' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfileDestination', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfileDestination';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfileDestination',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListingShippingProfileDestinationAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (optional)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (optional)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingShippingProfileDestinationAsync($shop_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->updateListingShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListingShippingProfileDestinationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (optional)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (optional)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfileDestination';
        $request = $this->updateListingShippingProfileDestinationRequest($shop_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateListingShippingProfileDestination'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost The cost of shipping to this country/region alone, measured in the store&#39;s default currency. (optional)
     * @param  float $secondary_cost The cost of shipping to this country/region with another item, measured in the store&#39;s default currency. (optional)
     * @param  string $destination_country_iso The ISO code of the country to which the listing ships. If null, request sets destination to destination_region (optional, default to 'null')
     * @param  string $destination_region The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\\&quot;none\\\&quot;, request sets destination to destination_country_iso, or \\\&quot;everywhere\\\&quot; if destination_country_iso is also null (optional, default to DESTINATION_REGION_NONE)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateListingShippingProfileDestinationRequest($shop_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = 'null', $destination_region = DESTINATION_REGION_NONE, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateListingShippingProfileDestination'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_destination_id' is set
        if ($shipping_profile_destination_id === null || (is_array($shipping_profile_destination_id) && count($shipping_profile_destination_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_destination_id when calling updateListingShippingProfileDestination'
            );
        }
        if ($shipping_profile_destination_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_destination_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        if ($shipping_carrier_id !== null && $shipping_carrier_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$shipping_carrier_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be bigger than or equal to 0.');
        }

        if ($min_delivery_days !== null && $min_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be smaller than or equal to 45.');
        }
        if ($min_delivery_days !== null && $min_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be bigger than or equal to 1.');
        }

        if ($max_delivery_days !== null && $max_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be smaller than or equal to 45.');
        }
        if ($max_delivery_days !== null && $max_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileDestination, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/destinations/{shipping_profile_destination_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_destination_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_destination_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_destination_id),
                $resourcePath
            );
        }

        // form params
        if ($primary_cost !== null) {
            $formParams['primary_cost'] = ObjectSerializer::toFormValue($primary_cost);
        }
        // form params
        if ($secondary_cost !== null) {
            $formParams['secondary_cost'] = ObjectSerializer::toFormValue($secondary_cost);
        }
        // form params
        if ($destination_country_iso !== null) {
            $formParams['destination_country_iso'] = ObjectSerializer::toFormValue($destination_country_iso);
        }
        // form params
        if ($destination_region !== null) {
            $formParams['destination_region'] = ObjectSerializer::toFormValue($destination_region);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateListingShippingProfileUpgrade
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (optional, default to 'null')
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (optional)
     * @param  float $price Additional cost of adding the shipping upgrade. (optional)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (optional)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EtsyApi\Model\ListingShippingProfileUpgrade|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema
     */
    public function updateListingShippingProfileUpgrade($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = 'null', $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->updateListingShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation updateListingShippingProfileUpgradeWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (optional, default to 'null')
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (optional)
     * @param  float $price Additional cost of adding the shipping upgrade. (optional)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (optional)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \EtsyApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EtsyApi\Model\ListingShippingProfileUpgrade|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema|\EtsyApi\Model\ErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListingShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = 'null', $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $request = $this->updateListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\EtsyApi\Model\ListingShippingProfileUpgrade' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ListingShippingProfileUpgrade', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\EtsyApi\Model\ErrorSchema' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EtsyApi\Model\ErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\EtsyApi\Model\ListingShippingProfileUpgrade';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ListingShippingProfileUpgrade',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EtsyApi\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListingShippingProfileUpgradeAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (optional, default to 'null')
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (optional)
     * @param  float $price Additional cost of adding the shipping upgrade. (optional)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (optional)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingShippingProfileUpgradeAsync($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = 'null', $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->updateListingShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListingShippingProfileUpgradeAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (optional, default to 'null')
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (optional)
     * @param  float $price Additional cost of adding the shipping upgrade. (optional)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (optional)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = 'null', $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\EtsyApi\Model\ListingShippingProfileUpgrade';
        $request = $this->updateListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateListingShippingProfileUpgrade'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#tag/ShopListing-ShippingProfile) associated with the listing. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority. (optional, default to 'null')
     * @param  string $type The type of the shipping upgrade. Domestic (0) or international (1). (optional)
     * @param  float $price Additional cost of adding the shipping upgrade. (optional)
     * @param  float $secondary_price Additional cost of adding the shipping upgrade for each additional item. (optional)
     * @param  int $shipping_carrier_id The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. (optional)
     * @param  string $mail_class The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. (optional, default to 'null')
     * @param  int $min_delivery_days The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     * @param  int $max_delivery_days The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateListingShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = 'null', $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = 'null', $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateListingShippingProfileUpgrade'
            );
        }
        if ($shop_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shop_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling updateListingShippingProfileUpgrade'
            );
        }
        if ($shipping_profile_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$shipping_profile_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'upgrade_id' is set
        if ($upgrade_id === null || (is_array($upgrade_id) && count($upgrade_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upgrade_id when calling updateListingShippingProfileUpgrade'
            );
        }
        if ($upgrade_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$upgrade_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        if ($shipping_carrier_id !== null && $shipping_carrier_id < 0) {
            throw new \InvalidArgumentException('invalid value for "$shipping_carrier_id" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be bigger than or equal to 0.');
        }

        if ($min_delivery_days !== null && $min_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be smaller than or equal to 45.');
        }
        if ($min_delivery_days !== null && $min_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }

        if ($max_delivery_days !== null && $max_delivery_days > 45) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be smaller than or equal to 45.');
        }
        if ($max_delivery_days !== null && $max_delivery_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_delivery_days" when calling ShopListingShippingProfileApi.updateListingShippingProfileUpgrade, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v3/application/shops/{shop_id}/listings/shipping-profiles/{shipping_profile_id}/upgrades/{upgrade_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($upgrade_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upgrade_id' . '}',
                ObjectSerializer::toPathValue($upgrade_id),
                $resourcePath
            );
        }

        // form params
        if ($upgrade_name !== null) {
            $formParams['upgrade_name'] = ObjectSerializer::toFormValue($upgrade_name);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($secondary_price !== null) {
            $formParams['secondary_price'] = ObjectSerializer::toFormValue($secondary_price);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
